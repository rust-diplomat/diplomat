// generated by diplomat-tool

part of 'lib.g.dart';

/// An ICU4X Fixed Decimal Format object, capable of formatting a [`ICU4XFixedDecimal`] as a string.
///
/// See the [Rust documentation for `FixedDecimalFormatter`](https://docs.rs/icu/latest/icu/decimal/struct.FixedDecimalFormatter.html) for more information.
final class ICU4XFixedDecimalFormatter implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  ICU4XFixedDecimalFormatter._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_ICU4XFixedDecimalFormatter_destroy));

  /// Creates a new [`ICU4XFixedDecimalFormatter`] from locale data.
  ///
  /// See the [Rust documentation for `try_new`](https://docs.rs/icu/latest/icu/decimal/struct.FixedDecimalFormatter.html#method.try_new) for more information.
  static ICU4XFixedDecimalFormatter? tryNew(ICU4XLocale locale, ICU4XDataProvider provider, ICU4XFixedDecimalFormatterOptions options) {
    final temp = ffi2.Arena();
    final result = _ICU4XFixedDecimalFormatter_try_new(locale._ffi, provider._ffi, options._toFfi(temp));
    temp.releaseAll();
    if (!result.isOk) {
      return null;
    }
    return ICU4XFixedDecimalFormatter._fromFfi(result.union.ok, []);
  }

  /// Formats a [`ICU4XFixedDecimal`] to a string.
  ///
  /// See the [Rust documentation for `format`](https://docs.rs/icu/latest/icu/decimal/struct.FixedDecimalFormatter.html#method.format) for more information.
  String formatWrite(ICU4XFixedDecimal value) {
    final write = _Write();
    _ICU4XFixedDecimalFormatter_format_write(_ffi, value._ffi, write._ffi);
    return write.finalize();
  }
}

@meta.ResourceIdentifier('ICU4XFixedDecimalFormatter_destroy')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'ICU4XFixedDecimalFormatter_destroy')
// ignore: non_constant_identifier_names
external void _ICU4XFixedDecimalFormatter_destroy(ffi.Pointer<ffi.Void> self);

@meta.ResourceIdentifier('ICU4XFixedDecimalFormatter_try_new')
@ffi.Native<_ResultOpaqueVoid Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, _ICU4XFixedDecimalFormatterOptionsFfi)>(isLeaf: true, symbol: 'ICU4XFixedDecimalFormatter_try_new')
// ignore: non_constant_identifier_names
external _ResultOpaqueVoid _ICU4XFixedDecimalFormatter_try_new(ffi.Pointer<ffi.Opaque> locale, ffi.Pointer<ffi.Opaque> provider, _ICU4XFixedDecimalFormatterOptionsFfi options);

@meta.ResourceIdentifier('ICU4XFixedDecimalFormatter_format_write')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XFixedDecimalFormatter_format_write')
// ignore: non_constant_identifier_names
external void _ICU4XFixedDecimalFormatter_format_write(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Opaque> value, ffi.Pointer<ffi.Opaque> write);
