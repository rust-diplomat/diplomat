Opaque(OpaqueDef { docs: Docs("An ICU4X Fixed Decimal Format object, capable of formatting a [`ICU4XFixedDecimal`] as a string.", [RustLink { path: Path { elements: [Ident("icu"), Ident("decimal"), Ident("FixedDecimalFormat")] }, typ: Struct, display: Normal }]), name: Check { _marker: PhantomData, buf: "ICU4XFixedDecimalFormat" }, methods: [Method { docs: Docs("Creates a new [`ICU4XFixedDecimalFormat`] from locale data.", [RustLink { path: Path { elements: [Ident("icu"), Ident("decimal"), Ident("FixedDecimalFormat"), Ident("try_new")] }, typ: FnInStruct, display: Normal }]), name: Check { _marker: PhantomData, buf: "try_new" }, lifetime_env: LifetimeEnv { nodes: [], num_lifetimes: 2 }, param_self: None, params: [Param { name: Check { _marker: PhantomData, buf: "locale" }, ty: Opaque(OpaquePath { lifetimes: TypeLifetimes { indices: [] }, optional: Optional(false), owner: Borrow { lifetime: NonStatic(TypeLifetime(0)), mutability: Immutable }, tcx_id: OpaqueId(3) }) }, Param { name: Check { _marker: PhantomData, buf: "provider" }, ty: Opaque(OpaquePath { lifetimes: TypeLifetimes { indices: [] }, optional: Optional(false), owner: Borrow { lifetime: NonStatic(TypeLifetime(1)), mutability: Immutable }, tcx_id: OpaqueId(0) }) }, Param { name: Check { _marker: PhantomData, buf: "options" }, ty: Struct(StructPath { lifetimes: TypeLifetimes { indices: [] }, tcx_id: StructId(0) }) }], output: Infallible(Some(OutType(Struct(OutStruct(StructPath { lifetimes: TypeLifetimes { indices: [] }, tcx_id: OutStructId(0) }))))) }, Method { docs: Docs("Formats a [`ICU4XFixedDecimal`] to a string.", [RustLink { path: Path { elements: [Ident("icu"), Ident("decimal"), Ident("FixedDecimalFormat"), Ident("format")] }, typ: FnInStruct, display: Normal }]), name: Check { _marker: PhantomData, buf: "format_write" }, lifetime_env: LifetimeEnv { nodes: [], num_lifetimes: 2 }, param_self: Some(ParamSelf { ty: Opaque(OpaquePath { lifetimes: TypeLifetimes { indices: [] }, optional: NonOptional, owner: Borrow { lifetime: NonStatic(TypeLifetime(0)), mutability: Immutable }, tcx_id: OpaqueId(1) }) }), params: [Param { name: Check { _marker: PhantomData, buf: "value" }, ty: Opaque(OpaquePath { lifetimes: TypeLifetimes { indices: [] }, optional: Optional(false), owner: Borrow { lifetime: NonStatic(TypeLifetime(1)), mutability: Immutable }, tcx_id: OpaqueId(2) }) }], output: Infallible(Some(Writeable)) }] })