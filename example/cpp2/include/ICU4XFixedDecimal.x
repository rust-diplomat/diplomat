Opaque(OpaqueDef { docs: Docs("", [RustLink { path: Path { elements: [Ident("fixed_decimal"), Ident("FixedDecimal")] }, typ: Struct, display: Normal }]), name: Check { _marker: PhantomData, buf: "ICU4XFixedDecimal" }, methods: [Method { docs: Docs("Construct an [`ICU4XFixedDecimal`] from an integer.", []), name: Check { _marker: PhantomData, buf: "new" }, lifetime_env: LifetimeEnv { nodes: [], num_lifetimes: 0 }, param_self: None, params: [Param { name: Check { _marker: PhantomData, buf: "v" }, ty: Primitive(Int(I32)) }], output: Infallible(Some(OutType(Opaque(OpaquePath { lifetimes: TypeLifetimes { indices: [] }, optional: Optional(true), owner: Own, tcx_id: OpaqueId(2) })))) }, Method { docs: Docs("Multiply the [`ICU4XFixedDecimal`] by a given power of ten.", [RustLink { path: Path { elements: [Ident("fixed_decimal"), Ident("FixedDecimal"), Ident("multiply_pow10")] }, typ: FnInStruct, display: Normal }]), name: Check { _marker: PhantomData, buf: "multiply_pow10" }, lifetime_env: LifetimeEnv { nodes: [], num_lifetimes: 1 }, param_self: Some(ParamSelf { ty: Opaque(OpaquePath { lifetimes: TypeLifetimes { indices: [] }, optional: NonOptional, owner: Borrow { lifetime: NonStatic(TypeLifetime(0)), mutability: Mutable }, tcx_id: OpaqueId(2) }) }), params: [Param { name: Check { _marker: PhantomData, buf: "power" }, ty: Primitive(Int(I16)) }], output: Infallible(None) }, Method { docs: Docs("Invert the sign of the [`ICU4XFixedDecimal`].", [RustLink { path: Path { elements: [Ident("fixed_decimal"), Ident("FixedDecimal"), Ident("negate")] }, typ: FnInStruct, display: Normal }]), name: Check { _marker: PhantomData, buf: "negate" }, lifetime_env: LifetimeEnv { nodes: [], num_lifetimes: 1 }, param_self: Some(ParamSelf { ty: Opaque(OpaquePath { lifetimes: TypeLifetimes { indices: [] }, optional: NonOptional, owner: Borrow { lifetime: NonStatic(TypeLifetime(0)), mutability: Mutable }, tcx_id: OpaqueId(2) }) }), params: [], output: Infallible(None) }, Method { docs: Docs("Format the [`ICU4XFixedDecimal`] as a string.", [RustLink { path: Path { elements: [Ident("fixed_decimal"), Ident("FixedDecimal"), Ident("write_to")] }, typ: FnInStruct, display: Normal }]), name: Check { _marker: PhantomData, buf: "to_string" }, lifetime_env: LifetimeEnv { nodes: [], num_lifetimes: 1 }, param_self: Some(ParamSelf { ty: Opaque(OpaquePath { lifetimes: TypeLifetimes { indices: [] }, optional: NonOptional, owner: Borrow { lifetime: NonStatic(TypeLifetime(0)), mutability: Immutable }, tcx_id: OpaqueId(2) }) }), params: [], output: Fallible(Some(Writeable), None) }] })