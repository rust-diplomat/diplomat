Opaque(OpaqueDef { docs: Docs("An ICU4X Locale, capable of representing strings like `\"en-US\"`.", [RustLink { path: Path { elements: [Ident("icu"), Ident("locid"), Ident("Locale")] }, typ: Struct, display: Normal }]), name: Check { _marker: PhantomData, buf: "ICU4XLocale" }, methods: [Method { docs: Docs("Construct an [`ICU4XLocale`] from a locale identifier represented as a string.", []), name: Check { _marker: PhantomData, buf: "new" }, lifetime_env: LifetimeEnv { nodes: [], num_lifetimes: 1 }, param_self: None, params: [Param { name: Check { _marker: PhantomData, buf: "name" }, ty: Slice(Str(NonStatic(TypeLifetime(0)))) }], output: Infallible(Some(OutType(Opaque(OpaquePath { lifetimes: TypeLifetimes { indices: [] }, optional: Optional(true), owner: Own, tcx_id: OpaqueId(3) })))) }, Method { docs: Docs("Construct an [`ICU4XLocale`] from a locale identifier represented as bytes.", []), name: Check { _marker: PhantomData, buf: "new_from_bytes" }, lifetime_env: LifetimeEnv { nodes: [], num_lifetimes: 1 }, param_self: None, params: [Param { name: Check { _marker: PhantomData, buf: "bytes" }, ty: Slice(Primitive(Borrow { lifetime: NonStatic(TypeLifetime(0)), mutability: Immutable }, Int(U8))) }], output: Infallible(Some(OutType(Opaque(OpaquePath { lifetimes: TypeLifetimes { indices: [] }, optional: Optional(true), owner: Own, tcx_id: OpaqueId(3) })))) }] })