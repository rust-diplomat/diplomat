{% if !docs.is_empty() %}
/** {{docs}}
*/
{% endif %}
export class {{type_name}} {
    {%- for field in fields %}
    #{{field.field_name}};
    get {{field.field_name}}() {% if typescript %}: {{field.js_type_name}};{% else %} {
        return this.#{{field.field_name}};
    }{% endif %}
    {% if mutable -%} 
    set {{field.field_name}}(value{% if typescript %}: {{field.js_type_name}});{% else %}){% endif %} {% if !typescript -%} {
        this.#{{field.field_name}} = value;
    }
    {%- endif -%}
    {%- endif -%}
    {%- endfor %}

    {%~ if !typescript %}
    // Return this struct in FFI function friendly format.
    // Returns an array that can be expanded with spread syntax (...)
    {% if lifetimes.all_lifetimes().len() != 0 -%}
    // If this struct contains any slices, their lifetime-edge-relevant objects will only
    // be constructed here, and can be appended to any relevant lifetime arrays here. <lifetime>AppendArray accepts a list
    // of arrays for each lifetime to do so. It accepts multiple lists per lifetime in case the caller needs to tie a lifetime to multiple
    // output arrays. Null is equivalent to an empty list: this lifetime is not being borrowed from.
    {%- if lifetimes.all_lifetimes().len() > 1 %}
    //
    // This method does not handle lifetime relationships: if `'foo: 'bar`, make sure fooAppendArray contains everything barAppendArray does.
    {%- endif -%}
    {% endif %}
    _intoFFI(
        {%- if lifetimes.all_lifetimes().len() != 0 -%}
        {%- for l in lifetimes.all_lifetimes() %}{{lifetimes.fmt_lifetime(l)}}AppendArray = []{% if !loop.last %}, {% endif %} 
        {%- endfor -%}
        {%- endif -%}
    ) {
        return [
            {%- for field in fields -%}
            {%- for statement in field.js_to_c %}
            {{statement}}{% if !loop.last %}, {% endif %}
            {%- endfor -%}
            {%- if !loop.last -%}, {% endif %}
            {%- endfor -%}
        ]
    }
    {% endif %}

    {% if lifetimes.all_lifetimes().len() == 0 -%}
    // This struct contains borrowed fields, so this takes in a list of
    // "edges" corresponding to where each lifetime's data may have been borrowed from
    // and passes it down to individual fields containing the borrow.
    // This method does not attempt to handle any dependencies between lifetimes, the caller
    // should handle this when constructing edge arrays.
    {% endif -%}
    _fromFFI(ptr{% if typescript %}: pointer{% endif -%} {%- for lifetime in lifetimes.all_lifetimes() -%}, {{lifetimes.fmt_lifetime(lifetime)}}Edges{%- if typescript %}: Array<object>{% endif %} {%- endfor -%}) {%- if typescript %};{% else %} {
        {%- for field in fields %}
        const {{field.field_name}}Deref = {{field.c_to_js_deref}};
        this.#{{field.field_name}} = {{field.c_to_js}};
        {%- endfor %}

        return this;
    }
    {%- endif %}

{%- for method in methods %}
    {{ method|indent(4) }}
{% endfor %}
}