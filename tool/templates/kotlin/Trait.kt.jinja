package {{domain}}.{{lib_name}}

import com.sun.jna.Callback
import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
{% if !docs.is_empty() -%}
/** {{docs}}
*/
{%- endif %}
interface {{trait_name}} {
    {%- for m in trait_methods %}
    {%- if !m.docs.is_empty() %}
    /** {{m.docs}}
    */
    {%- endif %}
    fun {{m.name}}({{m.non_native_params_and_types}}): {{m.output_type}};
    {%- endfor %}
}

{% if !callback_params.is_empty() -%}
    {%- for callback_param in callback_params -%}
        {{callback_param}}
    {%- endfor %}
{% endif -%}

{% if !trait_methods.is_empty() -%}
    {%- for trait_method in trait_methods %}
internal interface Runner_DiplomatTraitMethod_{{trait_name}}_{{trait_method.name}}: Callback {
    fun invoke(ignored: Pointer?{% if trait_method.input_params_and_types != "" %}, {{trait_method.input_params_and_types}} {% endif %}): {{trait_method.native_output_type}}
}
    {%- endfor %}
{%- endif %}

internal object {{trait_name}}_VTable_destructor: Callback {
    fun invoke(obj_pointer: Pointer) {
        DiplomatJVMRuntime.dropRustCookie(obj_pointer);
    }
};

internal class DiplomatTrait_{{trait_name}}_VTable_Native: Structure(), Structure.ByValue {
    @JvmField
    internal var destructor: Callback = {{trait_name}}_VTable_destructor;
    @JvmField
    internal var size: Pointer = Pointer(0L);
    @JvmField
    internal var alignment: Pointer = Pointer(0L);
    {% if !trait_methods.is_empty() -%}
        {%- for trait_method in trait_methods %}
    @JvmField
    internal var run_{{trait_method.name}}_callback: Runner_DiplomatTraitMethod_{{trait_name}}_{{trait_method.name}}
        = object :  Runner_DiplomatTraitMethod_{{trait_name}}_{{trait_method.name}} {
                override fun invoke(ignored: Pointer?{% if trait_method.input_params_and_types != "" %}, {{trait_method.input_params_and_types}} {% endif %}): {{trait_method.native_output_type}} {
                    throw Exception("ERROR NOT IMPLEMENTED")
                }
            }
        {%- endfor %}
    {% endif -%}

    // Define the fields of the struct
    override fun getFieldOrder(): List<String> {
        return listOf("destructor", "size", "alignment"{% if trait_method_names != "" %}, {{trait_method_names}}{% endif %})
    }
}

internal class DiplomatTrait_{{trait_name}}_Wrapper_Native: Structure(), Structure.ByValue {
    @JvmField
    internal var data_: Pointer = Pointer(0L);
    @JvmField
    internal var vtable: DiplomatTrait_{{trait_name}}_VTable_Native
        = DiplomatTrait_{{trait_name}}_VTable_Native();

    // Define the fields of the struct
    override fun getFieldOrder(): List<String> {
        return listOf("data_", "vtable")
    }
}

internal class DiplomatTrait_{{trait_name}}_Wrapper internal constructor (
    internal val nativeStruct: DiplomatTrait_{{trait_name}}_Wrapper_Native) {
    val data_: Pointer = nativeStruct.data_
    val vtable: DiplomatTrait_{{trait_name}}_VTable_Native = nativeStruct.vtable

    companion object {
        val NATIVESIZE: Long = Native.getNativeSize(DiplomatTrait_{{trait_name}}_Wrapper_Native::class.java).toLong()

        fun fromTraitObj(trt_obj: {{trait_name}}): DiplomatTrait_{{trait_name}}_Wrapper {
            val vtable = DiplomatTrait_{{trait_name}}_VTable_Native()
            
            {% if !trait_methods.is_empty() -%}
                {%- for trait_method in trait_methods %}
            val {{trait_method.name}}: Runner_DiplomatTraitMethod_{{trait_name}}_{{trait_method.name}} = object :  Runner_DiplomatTraitMethod_{{trait_name}}_{{trait_method.name}} {
                override fun invoke(ignored: Pointer?{% if trait_method.input_params_and_types != "" %}, {{trait_method.input_params_and_types}} {% endif %}): {{trait_method.native_output_type}} {
                    return trt_obj.{{trait_method.name}}({{trait_method.input_params}}){{trait_method.return_modification}};
                }
            }
            vtable.run_{{trait_method.name}}_callback = {{trait_method.name}};
                {%- endfor %}
            {% endif -%}
            val native_wrapper = DiplomatTrait_{{trait_name}}_Wrapper_Native();
            native_wrapper.vtable = vtable;
            val ret_val = DiplomatTrait_{{trait_name}}_Wrapper(native_wrapper);
            ret_val.nativeStruct.data_ = DiplomatJVMRuntime.buildRustCookie(ret_val as Object);
            return ret_val;
        }
    }
}

