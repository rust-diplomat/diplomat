
internal interface Runner_{{name}}: Callback {
    fun invoke(lang_specific_context: Pointer?{% if native_input_params_and_types != "" %}, {{native_input_params_and_types}} {% endif %}): {{native_output_type}}
}

internal class {{name}}_Native: Structure(), Structure.ByValue {
    @JvmField
    internal var data_: Pointer = Pointer(0L);
    @JvmField
    internal var run_callback: Runner_{{name}}
        = object :  Runner_{{name}} {
                override fun invoke(lang_specific_context: Pointer?{% if input_types != "" %}, {{native_input_params_and_types}} {% endif %}): {{native_output_type}} {
                    throw Exception("Default callback runner -- should be replaced.")
                }
            }
    @JvmField
    internal var destructor: Callback = object : Callback {
        fun invoke(obj_pointer: Pointer) {
            DiplomatJVMRuntime.dropRustCookie(obj_pointer);
        }
    };

    // Define the fields of the struct
    override fun getFieldOrder(): List<String> {
        return listOf("data_", "run_callback", "destructor")
    }
}

internal class {{name}} internal constructor (
    internal val nativeStruct: {{name}}_Native) {
    val data_: Pointer = nativeStruct.data_
    val run_callback: Callback = nativeStruct.run_callback
    val destructor: Callback = nativeStruct.destructor

    companion object {
        val NATIVESIZE: Long = Native.getNativeSize({{name}}_Native::class.java).toLong()

        fun fromCallback(cb: ({{input_types}})->{{output_type}}): {{name}} {
            val callback: Runner_{{name}} = object :  Runner_{{name}} {
                override fun invoke(lang_specific_context: Pointer?{% if input_types != "" %}, {{native_input_params_and_types}} {% endif %}): {{native_output_type}} {
                    return cb({{native_input_names}}){{return_modification}};
                }
            }
            val cb_wrap = {{name}}_Native()
            cb_wrap.run_callback = callback;
            cb_wrap.data_ = DiplomatJVMRuntime.buildRustCookie(cb_wrap as Object);
            return {{name}}(cb_wrap)
        }
    }
}