{%- let is_self_opaque = false -%}

{%- if is_sliceable %}
// Python lists are represented as PyObject**, which runs somewhat counter to any use cases where we want to be able to transparently pass over lists without copying over memory in any ways.
// bind_vector solves this issue by exposing std::vector<{{type_name}}> as a type that will exist inside of C++, with functions to access its memory from Python.
// TL;DR: this creates a faux list type that makes it easier to pass vectors of this type in Python without copying. 
nb::bind_vector<std::vector<{{type_name}}>>(mod, "{{type_name}}Slice"); 
{% endif -%}

nb::class_<{{type_name}}>(mod, "{{type_name_unnamespaced}}")
    {%- if !has_constructor %}
    .def(nb::init<>())

    {%- if fields.len() > 0 %}
    .def(nb::init<
    {%- for f in fields -%}
    {% if !loop.first %}, {% endif %}{{f.type_name}}
    {%- endfor -%}
    >(), 
    {%- for f in fields -%}
    {%- if !loop.first %}, {% endif %} "{{f.var_name}}"_a
    {%- if !f.type_name.starts_with("std::unique_ptr") -%}
    .none()
    {%- endif -%}
    {%- endfor -%}
    )
    {%- endif -%}

    {%- endif -%}

    {%- for f in fields %}
    {%- if !f.type_name.starts_with("std::unique_ptr") %}
    .def_rw("{{f.var_name}}", &{{type_name}}::{{f.var_name}})
    {%- else %}
    .def_prop_rw("{{f.var_name}}", 
        [](const {{type_name}}& self) { return self.{{f.var_name}}.get(); },
        []({{type_name}}& self, {{f.type_name}}&& v) { self.{{f.var_name}} = std::move(v); }
    )
    {%- endif -%}
    {%- endfor %}

{%- for m in methods %}
{% include "method_impl.cpp.jinja" %}
{%- endfor %};
