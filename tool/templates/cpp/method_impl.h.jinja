{%- macro method_body(method_name, is_generic_writeable, return_ty, c_to_cpp_return_expression) -%}
inline {##}
{{- return_ty }} {##}
{{- type_name }}::{{ method_name -}}
(
	{%- include "param_decls_list.h.jinja" %}
	{%- if is_generic_writeable %}{% if !m.param_decls.is_empty() %}, {%endif%}W& writeable{% endif -%}
) {##}
{%- for qualifier in m.post_qualifiers %}{{qualifier}} {% endfor -%}
{
	{%- for validation in m.param_validations %}
	{{ validation.replace('\n', "\n  ") }}
	{%- endfor -%}
	{%- if m.method.output.is_write() %}
	{%- if is_generic_writeable %}
	diplomat::capi::DiplomatWrite write = diplomat::WriteTrait<W>::Construct(writeable);
	{%- else %}
	std::string output;
	diplomat::capi::DiplomatWrite write = diplomat::WriteFromString(output);
	{%- endif %}
	{%- endif %}
	{% if !m.method.output.is_ffi_unit() -%}
	auto result = {##}
	{%- endif -%}
	{{ m.abi_name }}(
		{%- for param in m.cpp_to_c_params %}
		{%- if !loop.first %},
		{% endif -%}
		{{ param }}
		{%- endfor -%}
	);
	{%- if let Some(statement) = c_to_cpp_return_expression %}
	return {{ statement }};
	{%- endif %}
}
{%- endmacro %}

{%- let is_self_opaque = matches!(m.method.param_self, Some(hir::ParamSelf{ ty : SelfType::Opaque(_), ..})) -%}
{% call method_body(m.method_name, false, m.return_ty, m.c_to_cpp_return_expression) %}

{#- Extra method definitions for writeables -#}
{%- if let Some(m_writeable) = m.writeable_info %}
template<typename W>
{% call method_body(m_writeable.method_name, true, m_writeable.return_ty, m_writeable.c_to_cpp_return_expression) %}
{%- endif %}

{%- match m.method.attrs.special_method -%}
{%- when Some(hir::SpecialMethod::Add) | Some(hir::SpecialMethod::Sub) | Some(hir::SpecialMethod::Mul) | Some(hir::SpecialMethod::Div) -%}
{%- if !is_self_opaque -%}
{%- let op_str = m.method.attrs.special_method.as_ref().unwrap().operator_str().unwrap() -%}
{%- let param_var = m.param_decls[0] ~%}
inline {{ m.return_ty }}& {{type_name}}::{{m.method_name -}}=({{ param_var.type_name }} {{ param_var.var_name }}) {
  *this = *this {{ op_str }} {{param_var.var_name}};
  return *this;
}
{%- endif -%}

{%- when Some(hir::SpecialMethod::Iterable) %}
{% let helper_type = m.return_ty.replace("std::unique_ptr", "diplomat::next_to_iter_helper") %}
inline {{helper_type}} {{- type_name }}::begin() const {
	return iter();
}

{%- when Some(hir::SpecialMethod::Comparison) %}
inline bool {{type_name}}::operator==(const {{type_name}}& other) const {
	return this->{{m.method_name}}(other) == 0;
}

inline bool {{type_name}}::operator!=(const {{type_name}}& other) const {
	return this->{{m.method_name}}(other) != 0;
}

inline bool {{type_name}}::operator<=(const {{type_name}}& other) const {
	return this->{{m.method_name}}(other) <= 0;
}

inline bool {{type_name}}::operator>=(const {{type_name}}& other) const {
	return this->{{m.method_name}}(other) >= 0;
}

inline bool {{type_name}}::operator<(const {{type_name}}& other) const {
	return this->{{m.method_name}}(other) < 0;
}

inline bool {{type_name}}::operator>(const {{type_name}}& other) const {
	return this->{{m.method_name}}(other) > 0;
}

{%- when _ -%}
{%- endmatch -%}
