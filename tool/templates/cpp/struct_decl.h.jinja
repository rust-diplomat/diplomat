{% include "c_include.h.jinja" %}


{% if let Some(ns) = namespace -%}
namespace {{ns}} {
{% endif -%}

{% if !docs.is_empty() -%}
/**
 {{~ docs|prefix_trimmed(" * ")}}
 */
{% endif -%}
struct {{type_name_unnamespaced}} {
{%- for field in fields %}
	{{field.type_name}} {{field.var_name}};
{%- endfor %}
{% for m in methods %}
	{% if !m.docs.is_empty() -%}
	/**
	{{~ m.docs|prefix_trimmed("	 * ")}}
	 */
	{% endif -%}
	{% include "method_decl.h.jinja" %}
{% endfor %}
{%- if !fields.is_empty() %}
	inline {{ctype}} AsFFI() const;
	inline static {{type_name}} FromFFI({{ctype}} c_struct);
{%- endif %}
};

{% if namespace.is_some() -%}
} // namespace
{%-endif%}

{%- if is_sliceable %}
namespace diplomat {
	template<typename T>
	struct diplomat_c_span_convert<T, std::enable_if_t<std::is_same_v<T, span<const {{type_name}}>>>> {
		using type = {% if let Some(ns) = namespace -%} {{ns}}:: {%- endif -%} capi::Diplomat{{type_name_unnamespaced}}View;
	};

	template<typename T>
	struct diplomat_c_span_convert<T, std::enable_if_t<std::is_same_v<T, span<{{type_name}}>>>> {
		using type = {% if let Some(ns) = namespace -%} {{ns}}:: {%- endif -%} capi::Diplomat{{type_name_unnamespaced}}ViewMut;
};
}
{%- endif %}