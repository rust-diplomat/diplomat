{% if !doc_str.is_empty() %}
/** 
 * {{doc_str}}
 */
{% endif -%}
{%- let overrides_constructor = methods.special_methods.constructor.is_some() -%}

{% block header_info %}{% endblock %}

export class {{type_name}} {
    {% block class_body %}{% endblock %}

    {%- for method in methods.methods -%}

    {#- Do not include the method in typescript if it is meant to be private: -#}
    {%- if !method.method_decl.starts_with('#') || !typescript %}
{% if !method.doc_str.is_empty() %}
    /** 
     * {{method.doc_str|indent(4)}}
     */
    {% endif -%}
    {{ method|indent(4) }}
    {%- endif -%}
{%- endfor -%}
    {%- if let Some(it) = methods.special_methods.iterator %}

    next() {% if typescript %}: IteratorResult<{{it}}>;{% else %}{
        const out = this.#iteratorNext();

        return {
            value: out,
            done: out === null,
        };
    }{%- endif -%}
    {%- endif -%}

{%- if show_default_ctor || overrides_constructor %}

    constructor(
    {%- if let Some(ctor) = methods.special_methods.constructor %}
        {%- for param in ctor.parameters -%}
        {{- param.name -}}
        {%- if typescript %}: {{ param.ty -}}{%- endif -%}
        {%- if !loop.last -%}, {% endif -%}
        {%- endfor -%}
    {%- else -%}
        {%- block internal_ctor_params -%}{%- endblock -%}
    {%- endif -%}
    ) {%- if typescript -%} ; {%- else %} {
        {#- Quick and dirty way to access an exposed constructor if we don't want to provide the internalConstructor
        symbol to our constructor (for instance, if we are a struct that only takes structObj as a parameter for the constructor) -#}
        {%- if let Some(ctor) = methods.special_methods.constructor %}
        if (arguments[0] === diplomatRuntime.exposeConstructor) {
            return this.#internalConstructor(...Array.prototype.slice.call(arguments, 1));
        } else if (arguments[0] === diplomatRuntime.internalConstructor) {
            {#-
            If the first symbol is an internal constructor symbol, that means we can't possibly be looking for the internal
            #defaultConstructor. So instead we just pass along all of the arguments to the internalConstructor.
            #}
            return this.#internalConstructor(...arguments);
        } else {
            return this.#defaultConstructor(...arguments);
        }
        {%- else %}
        return this.#internalConstructor(...arguments)
        {%- endif %}
    }
    {%- endif -%}
{%- endif %}
}
