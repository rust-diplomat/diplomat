{% extends "js/js_class.js.jinja" %}

{% block header_info %}
{%- if typescript && !is_out -%}
type {{type_name}}_obj = {
    {%- for field in fields %}
    {{field.field_name}} {%- if let Type::DiplomatOption(o) = field.field_type %}?{% endif %}: {%- if let Type::Struct(s) = field.field_type %} {{field.js_type_name}}_obj {%- else %} {{field.js_type_name}} {%- endif %};
    {%- endfor %}
};

{% endif -%}
{% endblock %}

{% block internal_ctor_params -%}
structObj {%- if typescript %} : {{type_name}}_obj {%- endif -%} {%- if is_out && !typescript %}, internalConstructor{% endif -%}
{%- endblock %}

{% block class_body -%}
    {%- for field in fields -%}

    {%- if !typescript %}
    #{{field.field_name}};
    {% endif %}
    get {{field.field_name}}() {% if typescript %}: {{field.js_type_name}};{% else %} {
        return this.#{{field.field_name}};
    }{% endif -%}
    {%- if mutable %} 
    set {{field.field_name}}(value{% if typescript %}: {{field.js_type_name}});{% else %}){% endif %} {% if !typescript -%} {
        this.#{{field.field_name}} = value;
    }
    {%- endif -%}
    {%- endif %}
    {% endfor -%}

    {%~ if !is_out %}
    /** Create `{{type_name}}` from an object that contains all of `{{type_name}}`s fields.
    * Optional fields do not need to be included in the provided object.
    */
    {# This function exists because some structs can override their default constructors.
     # This exposes that original default constructor, and will ALWAYS exist to allow for consistent function calls to this kind of constructor.
     # For instance, demo_gen uses this function instead of the constructor
    -#}
    static fromFields(structObj {%- if typescript %} : {{type_name}}_obj {%- endif -%}) {% if typescript %}: {{type_name}}; {%- else -%} {
        return new {{type_name}}({% if overrides_constructor %}diplomatRuntime.exposeConstructor, {% endif -%} structObj);
    } {%- endif %}
    {%~ endif -%}

    {%- if !(typescript && is_out) %}
    {%- if !typescript %}
    #internalConstructor(structObj
        {%- if is_out && !typescript %}, internalConstructor{% endif -%}
    ) {%- if typescript %};{% else %} {
        if (typeof structObj !== "object") {
            throw new Error("{{type_name}}'s constructor takes an object of {{type_name}}'s fields.");
        }

        {%~ if is_out %}
        if (internalConstructor !== diplomatRuntime.internalConstructor) {
            throw new Error("{{type_name}} is an out struct and can only be created internally.");
        }
        {%- endif -%}

        {%- for field in fields %}
        if ("{{field.field_name}}" in structObj) {
            this.#{{ field.field_name }} = {%- if let Type::Struct(s) = field.field_type %} {{field.js_type_name}}._fromSuppliedValue(diplomatRuntime.internalConstructor, structObj.{{field.field_name}}) {%- else %} structObj.{{field.field_name}} {%- endif %};
        } else {
            {%- if field.is_optional %}
            this.#{{ field.field_name }} = null;
            {%- else %}
            throw new Error("Missing required field {{field.field_name}}.");
            {%- endif %}
        }
        {%~ endfor %}
        return this;
    }
    {%- endif -%}
    {%- endif -%}

    {%- endif -%}

    {%- if !typescript %}
    {%~ if !fields.is_empty() %}
    // Return this struct in FFI function friendly format.
    // Returns an array that can be expanded with spread syntax (...)
    {% if lifetimes.all_lifetimes().len() != 0 -%}
    // If this struct contains any slices, their lifetime-edge-relevant information will be
    // set up here, and can be appended to any relevant lifetime arrays here. <lifetime>AppendArray accepts a list
    // of arrays for each lifetime to do so. It accepts multiple lists per lifetime in case the caller needs to tie a lifetime to multiple
    // output arrays. Null is equivalent to an empty list: this lifetime is not being borrowed from.
    {%- if lifetimes.all_lifetimes().len() > 1 %}
    //
    // This method does not handle lifetime relationships: if `'foo: 'bar`, make sure fooAppendArray contains everything barAppendArray does.
    {%- endif -%}
    {%- endif %}
    {%- if needs_force_padding %}
    // JS structs need to be generated with or without padding depending on whether they are being passed as aggregates or splatted out into fields.
    // Most of the time this is known beforehand: large structs (>2 scalar fields) always get padding, and structs passed directly in parameters omit padding
    // if they are small. However small structs within large structs also get padding, and we signal that by setting forcePadding.
    {%- endif %}
    _intoFFI(
        functionCleanupArena,
        appendArrayMap{% if needs_force_padding %},
        forcePadding
        {%- endif %}
    ) {
        return [
            {%- for field in fields -%}
            {{field.js_to_c}}
            {%- if !loop.last -%}, {% endif %}
            {%- endfor -%}
        ]
    }

    static _fromSuppliedValue(internalConstructor, obj) {
        if (internalConstructor !== diplomatRuntime.internalConstructor) {
            throw new Error("_fromSuppliedValue cannot be called externally.");
        }

        if (obj instanceof {{type_name}}) {
            return obj;
        }

        return {{type_name}}.fromFields(obj);
    }

    _writeToArrayBuffer(
        arrayBuffer,
        offset,
        functionCleanupArena,
        appendArrayMap{% if needs_force_padding %},
        forcePadding
        {%- endif %}
    ) {
        {%- for field in fields %}
        {{field.js_to_c_write}};
        {%- endfor %}
    }

    {% if lifetimes.all_lifetimes().len() == 0 -%}
    // This struct contains borrowed fields, so this takes in a list of
    // "edges" corresponding to where each lifetime's data may have been borrowed from
    // and passes it down to individual fields containing the borrow.
    // This method does not attempt to handle any dependencies between lifetimes, the caller
    // should handle this when constructing edge arrays.
    {% endif -%}
    static _fromFFI(internalConstructor, {%- if !wraps_primitive %} ptr {%- else %} primitiveValue {%- endif -%} {%- for lifetime in lifetimes.all_lifetimes() -%}, {{lifetimes.fmt_lifetime(lifetime)}}Edges{%- endfor -%}) {
        if (internalConstructor !== diplomatRuntime.internalConstructor) {
            throw new Error("{{type_name}}._fromFFI is not meant to be called externally. Please use the default constructor.");
        }
        let structObj = {};

        {%- if wraps_primitive && owns_wrapped_primitive %}
        structObj.{{fields.first().unwrap().field_name}} = primitiveValue;
        {% else %}
        {%- for field in fields %}
        const {{field.field_name}}Deref = {%- if wraps_primitive && !owns_wrapped_primitive %} primitiveValue {%- else %} {{field.c_to_js_deref}} {%- endif %};
        structObj.{{field.field_name}} = {{field.c_to_js}};
        {%- endfor %}
        {%- endif %}

        return new {{type_name}}({% if overrides_constructor %}diplomatRuntime.exposeConstructor, {% endif -%} structObj {%- if is_out %}, internalConstructor{% endif -%});
    }
    
    {%- for l in lifetimes.all_lifetimes() %}
    {%- let ltname = lifetimes.fmt_lifetime(l) %}

    // Return all fields corresponding to lifetime `'{{ltname}}` 
    // without handling lifetime dependencies (this is the job of the caller)
    // This is all fields that may be borrowed from if borrowing `'{{ltname}}`,
    // assuming that there are no `'other: {{ltname}}`. bounds. In case of such bounds,
    // the caller should take care to also call _fieldsForLifetimeOther
    get _fieldsForLifetime{{ltname.to_uppercase()}}() { 
        return [
        {%- for field in self::iter_fields_with_lifetimes_from_set(fields, l) %}
            {%- if !loop.first %}, {% endif -%}
            {%- if let Some(st) = field.maybe_struct_borrow_info -%}
            {%- for def_lt in self::iter_def_lifetimes_matching_use_lt(l, st) -%}
            {%- if !loop.first %}, {% endif -%}
            ...{{field.field_name}}._fieldsForLifetime{{st.env.fmt_lifetime(def_lt).to_uppercase()}}
            {%- endfor -%}
            {%- else -%}
            {{field.field_name}}
            {%- endif -%}
        {%- endfor -%}
        ];
    };
    {%- endfor -%}
    {%- endif -%}
    {%- endif -%}
{% endblock %}
