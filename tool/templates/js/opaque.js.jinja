{% extends "js/js_class.js.jinja" %}

{% block header_info %}
{%- if !typescript -%}

const {{type_name}}_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.{{destructor}}(ptr);
});

{%- endif -%}
{%- endblock %}

{% block internal_ctor_params -%}
symbol, ptr, selfEdge {%- for lifetime in lifetimes.all_lifetimes() %}, {{lifetimes.fmt_lifetime(lifetime)}}Edge{% endfor %}
{%- endblock %}

{% block class_body -%}
    {%- if !typescript %}
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    {%- for lifetime in lifetimes.all_lifetimes() %}
    #{{lifetimes.fmt_lifetime(lifetime)}}Edge = [];
    {%- endfor %}

    #internalConstructor(symbol, ptr, selfEdge {%- for lifetime in lifetimes.all_lifetimes() %}, {{lifetimes.fmt_lifetime(lifetime)}}Edge{% endfor %}) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("{{type_name}} is an Opaque type. You cannot call its constructor.");
            return;
        }
        {%- for lifetime in lifetimes.all_lifetimes() %}
        {%- let lt = lifetimes.fmt_lifetime(lifetime) %}
        this.#{{lt}}Edge = {{lt}}Edge;
        {%- endfor %}
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            {{type_name}}_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }

    {%- endif %}
    get ffiValue(){% if typescript %}: pointer;{% else %} {
        return this.#ptr;
    }
    {%- endif -%}
{% endblock %}