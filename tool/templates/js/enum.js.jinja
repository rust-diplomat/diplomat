// Base enumerator definition
{% if !doc_str.is_empty() -%}
/** {{doc_str}}
*/
{% endif -%}
export class {{type_name}} {
{%- if !typescript %}
    #value = undefined;

    static #values = new Map([
{%- for variant in enum_def.variants %}
        ["{{formatter.fmt_enum_variant(variant)}}", {{variant.discriminant}}]{% if !loop.last %},{% endif %}
{%- endfor %}
    ]);

    {# TODO: I think it's possible to allow for constructors,
    but we just need to check if a constructor will be generated. -#}
    constructor(value) {
        if (arguments.length > 1 && arguments[0] === diplomatRuntime.internalConstructor) {
            // We pass in two internalConstructor arguments to create *new*
            // instances of this type, otherwise the enums are treated as singletons.
            if (arguments[1] === diplomatRuntime.internalConstructor ) {
                this.#value = arguments[2];
                return;
            }
            return {{type_name}}.#objectValues[arguments[1]];
        }

        if (value instanceof {{type_name}}) {
            return value;
        }

        let intVal = {{type_name}}.#values.get(value);

        // Nullish check, checks for null or undefined
        if (intVal == null) {
            return {{type_name}}.#objectValues[intVal];
        }

        throw TypeError(value + " is not a {{type_name}} and does not correspond to any of its enumerator values.");
    }
{% else %}
    constructor(value : {{type_name}} | string);
{% endif %}
    get value() {% if typescript %}: string;{% else %}{
        {%- if is_contiguous %}
        return [...{{type_name}}.#values.keys()][this.#value];
        {%- else %}
        for (let entry of {{type_name}}.#values) {
            if (entry[1] == this.#value) {
                return entry[0];
            }
        }
        {%- endif %}
    }{% endif %}

    get ffiValue() {% if typescript %}: number;{% else %}{
        return this.#value;
    }{% endif %}

{%- if !typescript %}
    static #objectValues = {% if is_contiguous -%} [ {%- else -%} { {%- endif %}
{%- for variant in enum_def.variants %}
        {% if !is_contiguous -%} [{{variant.discriminant}}]: {% endif -%} new {{type_name}}(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, {{variant.discriminant}}),
{%- endfor %}
    {% if is_contiguous -%} ] {%- else -%} } {%- endif %};
{%- endif %}
{% for variant in enum_def.variants -%}
    {%- let variant_name = formatter.fmt_enum_variant(variant) %}
    static {{variant_name}} {% if typescript -%} : {{type_name}} {%- else -%} = {{type_name}}.#objectValues[{{ variant.discriminant }}] {%- endif -%};
{%- endfor -%}

{%- for method in methods.methods %}

    {{ method|indent(4) }}
{%- endfor ~%}
    {{~ methods.special_methods|indent(4) -}}
}