// Base enumerator definition
{% if !doc_str.is_empty() -%}
/** {{doc_str}}
*/
{% endif -%}
export class {{type_name}} {
{%- if !typescript %}
    #value = undefined;

    static values = new Map([
{%- for variant in enum_def.variants %}
        ["{{formatter.fmt_enum_variant(variant)}}", {{variant.discriminant}}]{% if !loop.last %},{% endif %}
{%- endfor %}
    ]);

    {# TODO: I think it's possible to allow for constructors,
    but we just need to check if a constructor will be generated. -#}
    constructor(value) {
        if (arguments.length > 1 && arguments[0] === diplomatRuntime.internalConstructor) {
            this.#value = arguments[1];
            return;
        }

        if (value instanceof {{type_name}}) {
            this.#value = value.value;
            return;
        }

        let intVal = {{type_name}}.values.get(value);

        // Nullish check, checks for null or undefined
        if (intVal == null) {
            this.#value = intVal;
            return;
        }

        throw TypeError(value + " is not a {{type_name}} and does not correspond to any of its enumerator values.");
    }
{% else %}
    constructor(value : {{type_name}} | string);
{% endif %}
    get value() {% if typescript %}: string;{% else %}{
        return [...{{type_name}}.values.keys()][this.#value];
    }{% endif %}

    get ffiValue() {% if typescript %}: number;{% else %}{
        return this.#value;
    }{% endif %}
{% for variant in enum_def.variants -%}
    {%- let variant_name = formatter.fmt_enum_variant(variant) %}
    static {{variant_name}} {% if typescript -%} : {{type_name}} {%- else -%} = new {{type_name}}(diplomatRuntime.internalConstructor, {{variant.discriminant}}) {%- endif -%};
{%- endfor -%}

{%- for method in methods.methods %}

    {{ method|indent(4) }}
{%- endfor ~%}
    {{~ methods.special_methods|indent(4) -}}
}