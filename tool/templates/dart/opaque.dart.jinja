{% if !docs.is_empty() -%}
/// {{docs}}
{% endif -%}
final class {{type_name}} 
  {%- if let Some(it) = special.iterable %} with core.Iterable<{{it}}> {%- endif %} implements ffi.Finalizable
  {%- if special.comparator -%}, core.Comparable<{{type_name}}> {%- endif %}
  {%- if let Some(it) = special.iterator %}, core.Iterator<{{it}}> {%- endif %} {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  {%- for lifetime in lifetimes.all_lifetimes() %}
  // ignore: unused_field
  final core.List<Object> _{{lifetimes.fmt_lifetime(lifetime)}}Edge;
  {%- endfor %}

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  {{type_name}}._fromFfi(this._ffi, this._selfEdge {%- for lifetime in lifetimes.all_lifetimes() -%} , this._{{lifetimes.fmt_lifetime(lifetime)}}Edge {%- endfor -%}) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_{{destructor}}));

  {%- if let Some(it) = special.iterator %}

  {{it}}? _current;

  {# This is allowed to throw when called before moveNext or after unsuccessful moveNext()
    and is what the stdlib does, e.g. https://github.com/dart-lang/sdk/blob/main/tools/dom/src/_ListIterators.dart#L31 -#}
  {{it}} get current => _current!;

  bool moveNext() {
    _current = _iteratorNext();
    return _current != null;
  }

  {%- endif %}
  {%- for m in methods %}
{% include "method.dart.jinja" %}
  {%- endfor %}

  {%- if special.comparator %}

  @override
  bool operator ==(Object other) => other is {{type_name}} && compareTo(other) == 0;
  @override
  int get hashCode => 42; // Cannot get hash from Rust, so a constant is the only correct impl
  {%- endif %}
}

@meta.ResourceIdentifier('{{destructor}}')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: '{{destructor}}')
// ignore: non_constant_identifier_names
external void _{{destructor}}(ffi.Pointer<ffi.Void> self);

{%- for m in methods %}

{% include "native_method.dart.jinja" %}
{%- endfor %}
