{% if !docs.is_empty() -%}
/// {{docs}}
{% endif -%}
final class {{type_name}} implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  final core.List<Object> _edgeSelf;
  {%- for lifetime in lifetimes %}
  // ignore: unused_field
  final core.List<Object> _edge{{lifetime}};
  {%- endfor %}

  // Internal constructor from FFI.
  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  {{type_name}}._(this._underlying, {core.List<Object> edgeSelf = const []{%- for lifetime in lifetimes -%}, required core.List<Object> edge{{lifetime}} {%- endfor -%}}) : this._edgeSelf = edgeSelf{%- for lifetime in lifetimes -%}, this._edge{{lifetime}} = edge{{lifetime}} {%- endfor %} {
    if (this._edgeSelf.isEmpty) {
      // Owned
      _finalizer.attach(this, _underlying.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_{{destructor}}));

  {%- for m in methods %}
{% include "method.dart.jinja" %}
  {%- endfor %}
}

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: '{{destructor}}')
// ignore: non_constant_identifier_names
external void _{{destructor}}(ffi.Pointer<ffi.Void> self);

{%- for m in methods %}

{% include "native_method.dart.jinja" %}
{%- endfor %}
