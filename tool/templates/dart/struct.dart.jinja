final class _{{type_name}}Ffi extends ffi.Struct {
  {%- for field in fields %}
  {%- match field.annotation %}
  {%- when Some with (annotation) %}
  @{{annotation}}()
  {%- when None %}
  {%- endmatch %}
  external {{field.ffi_cast_type_name}} {{field.name}};
  {%- endfor %}
}

{% if !docs.is_empty() -%}
/// {{docs}}
{% endif -%}
final class {{type_name}} {

  {%- for field in fields %}
  {% if !mutable -%} final {% endif -%} {{field.dart_type_name}} {{field.name}};
  {%- endfor %}

  {%- match default_constructor %}
  {%- when Some with (c) %}

  {{c}}
  {%- when None %}
  {%- endmatch %}

  // ignore: unused_element
  {{type_name}}._(_{{type_name}}Ffi underlying) : 
    {%- for field in fields %}
    {{field.name}} = {{field.c_to_dart}}
    {%- if loop.last %};{% else %},{% endif -%}
    {%- endfor %}

  // ignore: unused_element
  _{{type_name}}Ffi _pointer(ffi.Allocator temp) {
    final pointer = temp<_{{type_name}}Ffi>();
    {%- for field in fields %}
    {%- for statement in field.dart_to_c %}
    {{statement}}
    {%- endfor %}
    {%- endfor %}
    return pointer.ref;
  }

  {%- for m in methods %}
{% include "method.dart.jinja" %}
  {%- endfor %}

  @override
  bool operator ==(Object other) =>
      other is {{type_name}}
      {%- for field in fields %} &&
      other.{{field.name}} == this.{{field.name}}
      {%- endfor %};

  @override
  int get hashCode => Object.hashAll([
      {%- for field in fields %}
        this.{{field.name}},
      {%- endfor %}
      ]);
}

{%- for m in methods %}

{% include "native_method.dart.jinja" %}
{%- endfor %}
