{%- if !docs.is_empty() %}
/// {{docs}}
{%- endif %}
class _{{type_name}}Ffi extends ffi.Struct {
	{%- for field in fields %}
	{%- match field.annotation %}
	{%- when Some with (annotation) %}
	@{{annotation}}()
	{%- when None %}
	{%- endmatch %}
	external {{field.ffi_cast_type_name}} {{field.name}};
	{%- endfor %}
}

class {{type_name}} {
	final _{{type_name}}Ffi _underlying;

  	// ignore: unused_element
	{{type_name}}._(this._underlying);

 	factory {{type_name}}() {
		final pointer = ffi2.calloc<_{{type_name}}Ffi>();
		final result = {{type_name}}._(pointer.ref);
		_callocFree.attach(result, pointer.cast());
		return result;
	}

	{% for field in fields -%}
	{{field.dart_type_name}} get {{field.name}} => {{ field.get_expression }};
	set {{field.name}}({{field.dart_type_name}} {{field.name}}) {
		{%- if !field.set_slice_conversions.is_empty() %}
		final alloc = ffi2.calloc;
		alloc.free(_underlying.{{field.name}}._bytes);
		{# TODO: What if the field is a struct containing a pointer? #}
		{%- endif %}
		{%- for conversion in field.set_slice_conversions -%}
		{{ conversion }}
		{%- endfor %}
		_underlying.{{field.name}} = {{field.set_expression}};
	}

	{%~ endfor %}
	{%- for m in methods -%}
	{%- include "method.dart.jinja" %}

	{%- endfor %}

	@override
	bool operator ==(Object other) =>
		other is {{type_name}}
		{%- for field in fields %}
		&& other._underlying.{{field.name}} == _underlying.{{field.name}}
		{%- endfor %};

	@override
	int get hashCode => Object.hashAll([{% for field in fields %}_underlying.{{field.name}},{% endfor %}]);
}
