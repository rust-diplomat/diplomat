{%- if !docs.is_empty() %}
/// {{docs}}
{%- endif %}
final class _{{type_name}}Ffi extends ffi.Struct {
  {%- for field in fields %}
  {%- match field.annotation %}
  {%- when Some with (annotation) %}
  @{{annotation}}()
  {%- when None %}
  {%- endmatch %}
  external {{field.ffi_cast_type_name}} {{field.name}};
  {%- endfor %}
}

final class {{type_name}} {
  final _{{type_name}}Ffi _underlying;

  {{type_name}}._(this._underlying);
  {%- if mutable && needs_constructor %}

  {# https://github.com/dart-lang/sdk/issues/45697 -#}
  factory {{type_name}}() {
    final pointer = ffi2.calloc<_{{type_name}}Ffi>();
    final result = {{type_name}}._(pointer.ref);
    _callocFree.attach(result, pointer.cast());
    return result;
  }
  {%- endif %}
  {%- for field in fields %}

  {{field.dart_type_name}} get {{field.name}} => {{ field.get_expression }};
  {%- if mutable %}
  set {{field.name}}({{field.dart_type_name}} {{field.name}}) {
    {%- for set_expression in field.set_expressions %}
    {{set_expression}}
    {%- endfor %}
  }
  {%- endif %}
  {%- endfor %}

  {%- for m in methods %}
{% include "method.dart.jinja" %}
  {%- endfor %}

  @override
  bool operator ==(Object other) =>
      other is {{type_name}}
      {%- for field in fields %} &&
      other._underlying.{{field.name}} == _underlying.{{field.name}}
      {%- endfor %};

  @override
  int get hashCode => Object.hashAll([
      {%- for field in fields %}
        _underlying.{{field.name}},
      {%- endfor %}
      ]);
}
