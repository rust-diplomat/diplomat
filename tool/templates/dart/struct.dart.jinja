{%- if !docs.is_empty() %}
/// {{docs}}
{%- endif %}
class _{{type_name}}Ffi extends ffi.Struct {
{%- for field in fields %}
		{%- match field.annotation %}
		{%- when Some with (annotation) %}
		@{{annotation}}()
		{%- when None %}
		{%- endmatch %}
		external {{field.ffi_cast_type_name}} {{field.name}};
{%- endfor %}
}

class {{type_name}} {
	final _{{type_name}}Ffi _underlying;

	{{type_name}}._(this._underlying);

 	factory {{type_name}}() {
		final pointer = allocators.calloc<_{{type_name}}Ffi>();
		final result = {{type_name}}._(pointer.ref);
		_finalizer.attach(result, pointer.cast());
		return result;
	}
	static late final _finalizer = Finalizer(allocators.calloc.free);

	{% for field in fields -%}
	{{field.dart_type_name}} get {{field.name}} => {{ field.get_expression }};
	void set {{field.name}}({{field.dart_type_name}} {{field.name}}) {
		{%- for cleanup in field.set_cleanups -%}
		{%- if loop.first %}
		final alloc = allocators.calloc;{% endif %}
		alloc.free({{ cleanup }});
		{%- endfor %}
		{%- for conversion in field.set_slice_conversions -%}
		{{ conversion }}
		{%- endfor %}
		{%- for set_expression in field.set_expressions -%}
		{{set_expression.name}} = {{set_expression.expression}};
		{%- endfor %}
	}

	{%~ endfor %}
	{%- for m in methods -%}
	{%- include "method.dart.jinja" %}

	{%- endfor %}
}
