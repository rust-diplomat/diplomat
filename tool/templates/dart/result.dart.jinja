{% if ok.is_some() || err.is_some() -%}
final class {{name}}Union extends ffi.Union {
  {%- if let Some((anno, ty)) = ok %}
  {%- if !anno.is_empty() %}
  {{ anno }}
  {%- endif %}
  external {{ ty }} ok;
  {%- endif %}
{% if let Some((anno, ty)) = err %}
  {%- if !anno.is_empty() %}
  {{ anno }}
  {%- endif %}
  external {{ ty }} err;
  {%- endif %}
}

{% endif -%}

final class {{name}} extends ffi.Struct {
  {% if ok.is_some() || err.is_some() -%}
  external {{name}}Union union;
  {%- endif %}

  @ffi.Bool()
  external bool isOk;

  // ignore: unused_element
  {%- if let Some((_, ty)) = ok %}
  factory {{name}}.ok({{ty}} val) {
    final struct = ffi.Struct.create<{{name}}>();
    struct.isOk = true;
    struct.union.ok = val;
    return struct;
  }
  {%- else %}
  factory {{name}}.ok() {
    final struct = ffi.Struct.create<{{name}}>();
    struct.isOk = true;
    return struct;
  }
  {%- endif %}
  // ignore: unused_element
  {%- if let Some((_, ty)) = err %}
  factory {{name}}.err({{ty}} val) {
    final struct = ffi.Struct.create<{{name}}>();
    struct.isOk = false;
    struct.union.err = val;
    return struct;
  }
  {%- else %}
  factory {{name}}.err() {
    final struct = ffi.Struct.create<{{name}}>();
    struct.isOk = false;
    return struct;
  }
  {%- endif %}
}
