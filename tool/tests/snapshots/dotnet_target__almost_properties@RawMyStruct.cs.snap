---
source: tool/tests/dotnet_target.rs
expression: out_texts.get(out).unwrap()
---
// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using SomeOrg.SomeModule;
using We.Also.Need.This;
using OurOrg.OurRustLib.Diplomat;
#pragma warning restore 0105

namespace OurOrg.OurRustLib.Raw;

#nullable enable

/// <summary>
/// This should not contain any property
/// </summary>
[StructLayout(LayoutKind.Sequential)]
public partial struct MyStruct
{
    private const string NativeLib = "mylib";

    /// <summary>
    /// This should not generate a property
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MyStruct_get_foo_by_key", ExactSpelling = true)]
    public static unsafe extern FfiResultU64Void GetFooByKey(MyStruct* self, byte* key, nuint keySz);

    /// <summary>
    /// This should not generate a property
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MyStruct_set_foo_by_key", ExactSpelling = true)]
    public static unsafe extern FfiResultVoidVoid SetFooByKey(MyStruct* self, byte* key, nuint keySz, long foo);

    /// <summary>
    /// This should not generate a property
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MyStruct_get_str_by_key", ExactSpelling = true)]
    public static unsafe extern void GetStrByKey(MyStruct* self, byte* key, nuint keySz, DiplomatWrite* writer);

    /// <summary>
    /// This should not generate a property
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MyStruct_set_str_by_key", ExactSpelling = true)]
    public static unsafe extern void SetStrByKey(MyStruct* self, byte* key, nuint keySz, byte* s, nuint sSz);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MyStruct_destroy", ExactSpelling = true)]
    public static unsafe extern void Destroy(MyStruct* self);
}

