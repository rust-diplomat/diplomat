---
source: tool/tests/dotnet_target.rs
expression: out_texts.get(out).unwrap()
---
// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Interop.Diplomat;
#pragma warning restore 0105

namespace Interop;

#nullable enable

public partial class MyStruct: IDisposable
{
    private unsafe Raw.MyStruct* _inner;

    /// <summary>
    /// Creates a managed <c>MyStruct</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe MyStruct(Raw.MyStruct* handle)
    {
        _inner = handle;
    }

    public void Write(DiplomatWriteable out)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            Raw.MyStruct.Write(_inner, &out);
        }
    }

    public string Write()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            Raw.MyStruct.Write(_inner, &writeable);
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    public void WriteUnit(DiplomatWriteable out)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            Raw.MyStruct.WriteUnit(_inner, &out);
        }
    }

    public string WriteUnit()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            Raw.MyStruct.WriteUnit(_inner, &writeable);
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    /// <exception cref="ByteException"></exception>
    public void WriteResult(DiplomatWriteable out)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            Raw.FfiResultVoidU8 result = Raw.MyStruct.WriteResult(_inner, &out);
            if (!result.isOk)
            {
                throw new ByteException(result.Err);
            }
        }
    }

    /// <exception cref="ByteException"></exception>
    public string WriteResult()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            Raw.FfiResultVoidU8 result = Raw.MyStruct.WriteResult(_inner, &writeable);
            if (!result.isOk)
            {
                throw new ByteException(result.Err);
            }
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    public byte WriteNoRearrange(DiplomatWriteable out)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            byte retVal = Raw.MyStruct.WriteNoRearrange(_inner, &out);
            return retVal;
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.MyStruct* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.MyStruct.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~MyStruct()
    {
        Dispose();
    }
}

