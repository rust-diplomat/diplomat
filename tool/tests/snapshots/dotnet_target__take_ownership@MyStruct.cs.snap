---
source: tool/tests/dotnet_target.rs
expression: out_texts.get(out).unwrap()

---
// Automatically generated by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Interop.Diplomat;
#pragma warning restore 0105

namespace Interop;

#nullable enable

public partial class MyStruct: IDisposable
{
    private unsafe Raw.MyStruct* _inner;

    /// <summary>
    /// Creates a managed <c>MyStruct</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// </remarks>
    /// <remarks>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe MyStruct(Raw.MyStruct* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>MyStruct</c> allocated on Rust side.
    /// If a custom Drop implementation is implemented on Rust side, it WILL run on destruction.
    /// </returns>
    public static MyStruct FromOther(MyOtherStruct myOtherStruct)
    {
        unsafe
        {
            Raw.MyOtherStruct* myOtherStructRaw;
            myOtherStructRaw = myOtherStruct.AsFFI();
            if (myOtherStructRaw == null)
            {
                throw new ObjectDisposedException("MyOtherStruct");
            }
            try
            {
                myOtherStruct.MarkAsMoved();
            }
            catch (DiplomatUnmovableObject e)
            {
                myOtherStruct.RestoreHandle(myOtherStructRaw);
                throw e;
            }
            Raw.MyStruct* retVal = Raw.MyStruct.FromOther(myOtherStructRaw);
            return new MyStruct(retVal);
        }
    }

    /// <returns>
    /// A <c>MyStruct</c> allocated on Rust side.
    /// If a custom Drop implementation is implemented on Rust side, it WILL run on destruction.
    /// </returns>
    public static MyStruct FromOtherOpt(MyOtherStruct? myOtherStruct)
    {
        unsafe
        {
            Raw.MyOtherStruct* myOtherStructRaw;
            if (myOtherStruct == null)
            {
                myOtherStructRaw = null;
            }
            else
            {
                myOtherStructRaw = myOtherStruct.AsFFI();
                if (myOtherStructRaw == null)
                {
                    throw new ObjectDisposedException("MyOtherStruct");
                }
            }
            try
            {
                if (myOtherStruct != null)
                {
                    myOtherStruct.MarkAsMoved();
                }
            }
            catch (DiplomatUnmovableObject e)
            {
                if (myOtherStruct != null)
                {
                    myOtherStruct.RestoreHandle(myOtherStructRaw);
                }
                throw e;
            }
            Raw.MyStruct* retVal = Raw.MyStruct.FromOtherOpt(myOtherStructRaw);
            return new MyStruct(retVal);
        }
    }

    /// <returns>
    /// A <c>MyStruct</c> allocated on Rust side.
    /// If a custom Drop implementation is implemented on Rust side, it WILL run on destruction.
    /// </returns>
    public static MyStruct FromNonOpaque(NonOpaqueStruct nonOpaque)
    {
        unsafe
        {
            Raw.NonOpaqueStruct* nonOpaqueRaw;
            nonOpaqueRaw = nonOpaque.AsFFI();
            if (nonOpaqueRaw == null)
            {
                throw new ObjectDisposedException("NonOpaqueStruct");
            }
            try
            {
                nonOpaque.MarkAsMoved();
            }
            catch (DiplomatUnmovableObject e)
            {
                nonOpaque.RestoreHandle(nonOpaqueRaw);
                throw e;
            }
            Raw.MyStruct* retVal = Raw.MyStruct.FromNonOpaque(nonOpaqueRaw);
            return new MyStruct(retVal);
        }
    }

    /// <returns>
    /// A <c>MyStruct</c> allocated on Rust side.
    /// If a custom Drop implementation is implemented on Rust side, it WILL run on destruction.
    /// </returns>
    public static MyStruct FromNonOpaqueOpt(NonOpaqueStruct? nonOpaque)
    {
        unsafe
        {
            Raw.NonOpaqueStruct* nonOpaqueRaw;
            if (nonOpaque == null)
            {
                nonOpaqueRaw = null;
            }
            else
            {
                nonOpaqueRaw = nonOpaque.AsFFI();
                if (nonOpaqueRaw == null)
                {
                    throw new ObjectDisposedException("NonOpaqueStruct");
                }
            }
            try
            {
                if (nonOpaque != null)
                {
                    nonOpaque.MarkAsMoved();
                }
            }
            catch (DiplomatUnmovableObject e)
            {
                if (nonOpaque != null)
                {
                    nonOpaque.RestoreHandle(nonOpaqueRaw);
                }
                throw e;
            }
            Raw.MyStruct* retVal = Raw.MyStruct.FromNonOpaqueOpt(nonOpaqueRaw);
            return new MyStruct(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.MyStruct* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Marks this object as moved into Rust side.
    /// </summary>
    public void MarkAsMoved()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            _inner = null;
        }
    }

    /// <summary>
    /// Restores unmanaged ressource handle to this object.
    /// </summary>
    public unsafe void RestoreHandle(Raw.MyStruct* handle)
    {
        _inner = handle;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.MyStruct.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~MyStruct()
    {
        Dispose();
    }
}

