---
source: tool/tests/dotnet_target.rs
expression: out_texts.get(out).unwrap()

---
// Automatically generated by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Interop.Diplomat;
#pragma warning restore 0105

namespace Interop;

#nullable enable

public partial class MyStruct: IDisposable
{
    private unsafe Raw.MyStruct* _inner;
    private readonly bool _isAllocatedByRust;

    /// <summary>
    /// Creates a managed <c>MyStruct</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// </remarks>
    /// <remarks>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe MyStruct(Raw.MyStruct* handle)
    {
        _inner = handle;
        _isAllocatedByRust = true;
    }

    /// <summary>
    /// Creates a managed <c>MyStruct</c> from the raw struct.
    /// </summary>
    /// <remarks>
    /// This constructor allocates the raw struct on C# side.
    /// If a custom Drop implementation is implemented on Rust side, it will NOT run on destruction.
    /// </remarks>
    public MyStruct(Raw.MyStruct handle)
    {
        unsafe
        {
            _inner = (Raw.MyStruct*)Marshal.AllocHGlobal(sizeof(Raw.MyStruct));
            Buffer.MemoryCopy(&handle, _inner, sizeof(Raw.MyStruct), sizeof(Raw.MyStruct));
            _isAllocatedByRust = false;
        }
    }

    /// <returns>
    /// A <c>MyStruct</c> allocated on C# side.
    /// If a custom Drop implementation is implemented on Rust side, it will NOT run on destruction.
    /// </returns>
    public static MyStruct New(MyStruct foo, MyStruct bar)
    {
        unsafe
        {
            Raw.MyStruct* fooRaw;
            fooRaw = foo.AsFFI();
            if (fooRaw == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            Raw.MyStruct* barRaw;
            barRaw = bar.AsFFI();
            if (barRaw == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            Raw.MyStruct retVal = Raw.MyStruct.New(fooRaw, barRaw);
            return new MyStruct(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.MyStruct* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Marks this object as moved into Rust side.
    /// </summary>
    /// <remarks>
    /// Safety: this instance must be allocated on Rust side.
    /// </remarks>
    /// <exception cref="DiplomatUnmovableObject"></exception>
    public void MarkAsMoved()
    {
        unsafe
        {
            if (!_isAllocatedByRust)
            {
                throw new DiplomatUnmovableObject("MyStruct", "not allocated by Rust");
            }
            if (_inner == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            _inner = null;
        }
    }

    /// <summary>
    /// Restores unmanaged ressource handle to this object.
    /// </summary>
    /// <remarks>
    /// Safety: the pointee must be allocated on Rust side.
    /// </remarks>
    public unsafe void RestoreHandle(Raw.MyStruct* handle)
    {
        _inner = handle;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            if (_isAllocatedByRust)
            {
                Raw.MyStruct.Destroy(_inner);
            }
            else
            {
                Marshal.FreeHGlobal((IntPtr)_inner);
            }

            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~MyStruct()
    {
        Dispose();
    }
}

