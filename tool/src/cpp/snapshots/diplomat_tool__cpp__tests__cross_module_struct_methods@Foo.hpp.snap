---
source: tool/src/cpp/mod.rs
expression: out_texts.get(out).unwrap()

---
#ifndef Foo_HPP
#define Foo_HPP
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <algorithm>
#include <memory>
#include <variant>
#include <optional>
#include "diplomat_runtime.hpp"

namespace capi {
#include "Foo.h"
}

struct Bar;

/**
 * A destruction policy for using Foo with std::unique_ptr.
 */
struct FooDeleter {
  void operator()(capi::Foo* l) const noexcept {
    capi::Foo_destroy(l);
  }
};
class Foo {
 public:
  Bar to_bar() const;
  inline const capi::Foo* AsFFI() const { return this->inner.get(); }
  inline capi::Foo* AsFFIMut() { return this->inner.get(); }
  inline Foo(capi::Foo* i) : inner(i) {}
  Foo() = default;
  Foo(Foo&&) noexcept = default;
  Foo& operator=(Foo&& other) noexcept = default;
 private:
  std::unique_ptr<capi::Foo, FooDeleter> inner;
};

#include "Bar.hpp"

inline Bar Foo::to_bar() const {
  capi::Bar diplomat_raw_struct_out_value = capi::Foo_to_bar(this->inner.get());
  return Bar{ .y = std::move(Foo(diplomat_raw_struct_out_value.y)) };
}
#endif

