---
source: tool/src/cpp/types.rs
expression: out_texts.get(out).unwrap()
---
#ifndef MyStruct_HPP
#define MyStruct_HPP
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <algorithm>
#include <memory>
#include <variant>
#include <optional>
#include "diplomat_runtime.hpp"

#include "MyStruct.h"


struct MyStruct {
 public:
  template<typename W> void write_to_write(W& to) const;
  std::string write() const;
};


template<typename W> inline void MyStruct::write_to_write(W& to) const {
  capi::DiplomatWrite to_writer = diplomat::WriteTrait<W>::Construct(to);
  capi::MyStruct_write((capi::MyStruct*) &this, &to_writer);
}
inline std::string MyStruct::write() const {
  std::string diplomat_write_string;
  capi::DiplomatWrite diplomat_write_out = diplomat::WriteFromString(diplomat_write_string);
  capi::MyStruct_write((capi::MyStruct*) &this, &diplomat_write_out);
  return diplomat_write_string;
}
#endif
