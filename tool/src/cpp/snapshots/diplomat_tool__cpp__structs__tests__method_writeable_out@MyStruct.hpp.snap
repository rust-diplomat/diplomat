---
source: tool/src/cpp/structs.rs
expression: out_texts.get(out).unwrap()
---
#ifndef MyStruct_HPP
#define MyStruct_HPP
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <algorithm>
#include <memory>
#include <variant>
#include <optional>
#include "diplomat_runtime.hpp"

#include "MyStruct.h"


/**
 * A destruction policy for using MyStruct with std::unique_ptr.
 */
struct MyStructDeleter {
  void operator()(capi::MyStruct* l) const noexcept {
    capi::MyStruct_destroy(l);
  }
};
class MyStruct {
 public:
  template<typename W> void write_to_writeable(W& out) const;
  std::string write() const;
  template<typename W> void write_unit_to_writeable(W& out) const;
  std::string write_unit() const;
  template<typename W> diplomat::result<std::monostate, uint8_t> write_result_to_writeable(W& out) const;
  diplomat::result<std::string, uint8_t> write_result() const;
  uint8_t write_no_rearrange(capi::DiplomatWriteable& out) const;
  inline const capi::MyStruct* AsFFI() const { return this->inner.get(); }
  inline capi::MyStruct* AsFFIMut() { return this->inner.get(); }
  inline MyStruct(capi::MyStruct* i) : inner(i) {}
  MyStruct() = default;
  MyStruct(MyStruct&&) noexcept = default;
  MyStruct& operator=(MyStruct&& other) noexcept = default;
 private:
  std::unique_ptr<capi::MyStruct, MyStructDeleter> inner;
};


template<typename W> inline void MyStruct::write_to_writeable(W& out) const {
  capi::DiplomatWriteable out_writer = diplomat::WriteableTrait<W>::Construct(out);
  capi::MyStruct_write(this->inner.get(), &out_writer);
}
inline std::string MyStruct::write() const {
  std::string diplomat_writeable_string;
  capi::DiplomatWriteable diplomat_writeable_out = diplomat::WriteableFromString(diplomat_writeable_string);
  capi::MyStruct_write(this->inner.get(), &diplomat_writeable_out);
  return diplomat_writeable_string;
}
template<typename W> inline void MyStruct::write_unit_to_writeable(W& out) const {
  capi::DiplomatWriteable out_writer = diplomat::WriteableTrait<W>::Construct(out);
  capi::MyStruct_write_unit(this->inner.get(), &out_writer);
}
inline std::string MyStruct::write_unit() const {
  std::string diplomat_writeable_string;
  capi::DiplomatWriteable diplomat_writeable_out = diplomat::WriteableFromString(diplomat_writeable_string);
  capi::MyStruct_write_unit(this->inner.get(), &diplomat_writeable_out);
  return diplomat_writeable_string;
}
template<typename W> inline diplomat::result<std::monostate, uint8_t> MyStruct::write_result_to_writeable(W& out) const {
  capi::DiplomatWriteable out_writer = diplomat::WriteableTrait<W>::Construct(out);
  auto diplomat_result_raw_out_value = capi::MyStruct_write_result(this->inner.get(), &out_writer);
  diplomat::result<std::monostate, uint8_t> diplomat_result_out_value;
  if (diplomat_result_raw_out_value.is_ok) {
    diplomat_result_out_value = diplomat::Ok(std::monostate());
  } else {
    diplomat_result_out_value = diplomat::Err<uint8_t>(diplomat_result_raw_out_value.err);
  }
  return diplomat_result_out_value;
}
inline diplomat::result<std::string, uint8_t> MyStruct::write_result() const {
  std::string diplomat_writeable_string;
  capi::DiplomatWriteable diplomat_writeable_out = diplomat::WriteableFromString(diplomat_writeable_string);
  auto diplomat_result_raw_out_value = capi::MyStruct_write_result(this->inner.get(), &diplomat_writeable_out);
  diplomat::result<std::monostate, uint8_t> diplomat_result_out_value;
  if (diplomat_result_raw_out_value.is_ok) {
    diplomat_result_out_value = diplomat::Ok(std::monostate());
  } else {
    diplomat_result_out_value = diplomat::Err<uint8_t>(diplomat_result_raw_out_value.err);
  }
  return diplomat_result_out_value.replace_ok(std::move(diplomat_writeable_string));
}
inline uint8_t MyStruct::write_no_rearrange(capi::DiplomatWriteable& out) const {
  capi::DiplomatWriteable out_writer = diplomat::WriteableTrait<W>::Construct(out);
  return capi::MyStruct_write_no_rearrange(this->inner.get(), &out_writer);
}
#endif

