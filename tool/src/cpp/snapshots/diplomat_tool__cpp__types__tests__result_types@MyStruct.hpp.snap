---
source: tool/src/cpp/types.rs
expression: out_texts.get(out).unwrap()

---
#ifndef MyStruct_HPP
#define MyStruct_HPP
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <algorithm>
#include <memory>
#include <optional>
#include <variant>
#include "diplomat_runtime.hpp"

namespace capi {
#include "MyStruct.h"
}

class MyOpaqueStruct;
struct MyStruct;

struct MyStructDeleter {
  void operator()(capi::MyStruct* l) const noexcept {
    capi::MyStruct_destroy(l);
  }
};
struct MyStruct {
 public:
  diplomat::result<MyOpaqueStruct, uint8_t> a;
  static diplomat::result<MyStruct, uint8_t> new_();
};


inline diplomat::result<MyStruct, uint8_t> MyStruct::new_() {
  auto diplomat_result_raw_out_value = capi::MyStruct_new();
  diplomat::result<MyStruct, uint8_t> diplomat_result_out_value;
  diplomat_result_out_value.is_ok = diplomat_result_raw_out_value.is_ok;
  if (diplomat_result_raw_out_value.is_ok) {
  capi::MyStruct diplomat_raw_struct_out_value = diplomat_result_raw_out_value.ok;
  auto diplomat_result_raw_out_value_a = diplomat_raw_struct_out_value.a;
  diplomat::result<MyOpaqueStruct, uint8_t> diplomat_result_out_value_a;
  diplomat_result_out_value_a.is_ok = diplomat_result_raw_out_value_a.is_ok;
  if (diplomat_result_raw_out_value_a.is_ok) {
    diplomat_result_out_value_a.ok = MyOpaqueStruct(diplomat_result_raw_out_value_a.ok);
  } else {
    diplomat_result_out_value_a.err = diplomat_result_raw_out_value_a.err;
  }
    diplomat_result_out_value.ok = MyStruct{ .a = std::move(diplomat_result_out_value_a) };
  } else {
    diplomat_result_out_value.err = diplomat_result_raw_out_value.err;
  }
  return diplomat_result_out_value;
}
#endif

