---
source: tool/src/cpp/structs.rs
expression: out_texts.get(out).unwrap()

---
#ifndef MyStruct_HPP
#define MyStruct_HPP
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <algorithm>
#include <memory>
#include <variant>

#include "mozilla/Maybe.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/Span.h"
#include "diplomat_runtime.hpp"

namespace capi {
#include "MyStruct.h"
}

class MyStruct;

/**
 * A destruction policy for using MyStruct with mozilla::UniquePtr.
 */
struct MyStructDeleter {
  void operator()(capi::MyStruct* l) const noexcept {
    capi::MyStruct_destroy(l);
  }
};
class MyStruct {
 public:
  static MyStruct new_slice(const mozilla::Span<double> v);
  void set_slice(const mozilla::Span<double> new_slice);
  inline const capi::MyStruct* AsFFI() const { return this->inner.get(); }
  inline capi::MyStruct* AsFFIMut() { return this->inner.get(); }
  inline MyStruct(capi::MyStruct* i) : inner(i) {}
  MyStruct() = default;
  MyStruct(MyStruct&&) noexcept = default;
  MyStruct& operator=(MyStruct&& other) noexcept = default;
 private:
  mozilla::UniquePtr<capi::MyStruct, MyStructDeleter> inner;
};


inline MyStruct MyStruct::new_slice(const mozilla::Span<double> v) {
  return MyStruct(capi::MyStruct_new_slice(v.data(), v.size()));
}
inline void MyStruct::set_slice(const mozilla::Span<double> new_slice) {
  capi::MyStruct_set_slice(this->inner.get(), new_slice.data(), new_slice.size());
}
#endif

