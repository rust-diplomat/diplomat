---
source: tool/src/cpp/conversions.rs
expression: out_texts.get(out).unwrap()

---
#ifndef MyStruct_HPP
#define MyStruct_HPP
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <algorithm>
#include <memory>
#include <variant>

#include "mozilla/Maybe.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/Span.h"
#include "diplomat_runtime.hpp"

namespace capi {
#include "MyStruct.h"
}

class MyStruct;

/**
 * A destruction policy for using MyStruct with mozilla::UniquePtr.
 */
struct MyStructDeleter {
  void operator()(capi::MyStruct* l) const noexcept {
    capi::MyStruct_destroy(l);
  }
};
class MyStruct {
 public:
  mozilla::Maybe<MyStruct> create() const;
  inline const capi::MyStruct* AsFFI() const { return this->inner.get(); }
  inline capi::MyStruct* AsFFIMut() { return this->inner.get(); }
  inline MyStruct(capi::MyStruct* i) : inner(i) {}
  MyStruct() = default;
  MyStruct(MyStruct&&) noexcept = default;
  MyStruct& operator=(MyStruct&& other) noexcept = default;
 private:
  mozilla::UniquePtr<capi::MyStruct, MyStructDeleter> inner;
};


inline mozilla::Maybe<MyStruct> MyStruct::create() const {
  auto diplomat_optional_raw_out_value = capi::MyStruct_create(this->inner.get());
  mozilla::Maybe<MyStruct> diplomat_optional_out_value;
  if (diplomat_optional_raw_out_value != nullptr) {
    diplomat_optional_out_value = mozilla::Some(MyStruct(diplomat_optional_raw_out_value));
  } else {
    diplomat_optional_out_value = mozilla::Nothing();
  }
  return diplomat_optional_out_value;
}
#endif

