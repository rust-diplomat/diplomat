---
source: tool/src/cpp/structs.rs
expression: out_texts.get(out).unwrap()
---
#ifndef MyStruct_HPP
#define MyStruct_HPP
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <algorithm>
#include <memory>
#include <variant>
#include <optional>
#include "diplomat_runtime.hpp"

#include "MyStruct.h"

class MyStruct;

/**
 * A destruction policy for using MyStruct with std::unique_ptr.
 */
struct MyStructDeleter {
  void operator()(capi::MyStruct* l) const noexcept {
    capi::MyStruct_destroy(l);
  }
};
class MyStruct {
 public:
  static MyStruct new_(uint8_t a, uint8_t b);
  uint8_t get_a() const;
  void set_b(uint8_t b);
  inline const capi::MyStruct* AsFFI() const { return this->inner.get(); }
  inline capi::MyStruct* AsFFIMut() { return this->inner.get(); }
  inline MyStruct(capi::MyStruct* i) : inner(i) {}
  MyStruct() = default;
  MyStruct(MyStruct&&) noexcept = default;
  MyStruct& operator=(MyStruct&& other) noexcept = default;
 private:
  std::unique_ptr<capi::MyStruct, MyStructDeleter> inner;
};


inline MyStruct MyStruct::new_(uint8_t a, uint8_t b) {
  return MyStruct(capi::MyStruct_new(a, b));
}
inline uint8_t MyStruct::get_a() const {
  return capi::MyStruct_get_a(this->inner.get());
}
inline void MyStruct::set_b(uint8_t b) {
  capi::MyStruct_set_b(this->inner.get(), b);
}
#endif

