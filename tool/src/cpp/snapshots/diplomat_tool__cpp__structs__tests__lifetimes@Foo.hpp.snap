---
source: tool/src/cpp/structs.rs
expression: out_texts.get(out).unwrap()
---
#ifndef Foo_HPP
#define Foo_HPP
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <algorithm>
#include <memory>
#include <variant>
#include <optional>
#include "diplomat_runtime.hpp"

#include "Foo.h"

struct Foo;

struct Foo {
 public:

  /**
   * Lifetimes: `a` must live at least as long as the output.
   */
  static Foo foo(const diplomat::span<const uint8_t> a);

  /**
   * Lifetimes: `a` must live for the duration of the program.
   */
  static uint32_t bar(const diplomat::span<const uint8_t> a);
};


inline Foo Foo::foo(const diplomat::span<const uint8_t> a) {
  capi::Foo diplomat_raw_struct_out_value = capi::Foo_foo(a.data(), a.size());
  return Foo{  };
}
inline uint32_t Foo::bar(const diplomat::span<const uint8_t> a) {
  return capi::Foo_bar(a.data(), a.size());
}
#endif

