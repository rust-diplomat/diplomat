---
source: tool/src/cpp/types.rs
expression: out_texts.get(out).unwrap()

---
#ifndef MyOpaqueStruct_HPP
#define MyOpaqueStruct_HPP
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <algorithm>
#include <memory>
#include <variant>

#include "mozilla/Maybe.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/Span.h"
#include "diplomat_runtime.hpp"

namespace capi {
#include "MyOpaqueStruct.h"
}


/**
 * A destruction policy for using MyOpaqueStruct with mozilla::UniquePtr.
 */
struct MyOpaqueStructDeleter {
  void operator()(capi::MyOpaqueStruct* l) const noexcept {
    capi::MyOpaqueStruct_destroy(l);
  }
};
class MyOpaqueStruct {
 public:
  inline const capi::MyOpaqueStruct* AsFFI() const { return this->inner.get(); }
  inline capi::MyOpaqueStruct* AsFFIMut() { return this->inner.get(); }
  inline MyOpaqueStruct(capi::MyOpaqueStruct* i) : inner(i) {}
  MyOpaqueStruct() = default;
  MyOpaqueStruct(MyOpaqueStruct&&) noexcept = default;
  MyOpaqueStruct& operator=(MyOpaqueStruct&& other) noexcept = default;
 private:
  mozilla::UniquePtr<capi::MyOpaqueStruct, MyOpaqueStructDeleter> inner;
};


#endif

