---
source: tool/src/js/conversions.rs
expression: out_texts.get(out).unwrap()
---
import wasm from "./wasm.mjs"
import * as diplomatRuntime from "./diplomat-runtime.mjs"
const diplomat_alloc_destroy_registry = new FinalizationRegistry(obj => {
  wasm.diplomat_free(obj["ptr"], obj["size"], obj["align"]);
});

export class Point {
  constructor(underlying, edges_x, edges_y) {
    this.x = new Scalar(diplomatRuntime.ptrRead(wasm, underlying), false, [...edges_x]);
    this.y = new Scalar(diplomatRuntime.ptrRead(wasm, underlying + 4), false, [...edges_y]);
  }

  get_x() {
    const field_x_this = this["x"];
    const field_y_this = this["y"];
    return new Scalar(wasm.Point_get_x(field_x_this.underlying, field_y_this.underlying), false, [field_x_this]);
  }
}

export class PointTranspose {
  constructor(underlying, edges_u, edges_v) {
    this.point = new Point(underlying, edges_u, edges_v);
    this.transpose = new Point(underlying + 8, edges_v, edges_u);
  }

  static new(arg_u, arg_v) {
    return (() => {
      const diplomat_receive_buffer = wasm.diplomat_alloc(16, 4);
      wasm.PointTranspose_new(diplomat_receive_buffer, arg_u.underlying, arg_v.underlying);
      const out = new PointTranspose(diplomat_receive_buffer, [arg_u], [arg_v]);
      wasm.diplomat_free(diplomat_receive_buffer, 16, 4);
      return out;
    })();
  }

  transpose() {
    const field_point_this = this["point"];
    const field_x_field_point_this = field_point_this["x"];
    const field_y_field_point_this = field_point_this["y"];
    const field_transpose_this = this["transpose"];
    const field_x_field_transpose_this = field_transpose_this["x"];
    const field_y_field_transpose_this = field_transpose_this["y"];
    return (() => {
      const diplomat_receive_buffer = wasm.diplomat_alloc(16, 4);
      wasm.PointTranspose_transpose(diplomat_receive_buffer, field_x_field_point_this.underlying, field_y_field_point_this.underlying, field_x_field_transpose_this.underlying, field_y_field_transpose_this.underlying);
      const out = new PointTranspose(diplomat_receive_buffer, [field_y_field_point_this, field_x_field_transpose_this], [field_x_field_point_this, field_y_field_transpose_this]);
      wasm.diplomat_free(diplomat_receive_buffer, 16, 4);
      return out;
    })();
  }

  point() {
    const field_point_this = this["point"];
    const field_x_field_point_this = field_point_this["x"];
    const field_y_field_point_this = field_point_this["y"];
    const field_transpose_this = this["transpose"];
    const field_x_field_transpose_this = field_transpose_this["x"];
    const field_y_field_transpose_this = field_transpose_this["y"];
    return (() => {
      const diplomat_receive_buffer = wasm.diplomat_alloc(8, 4);
      wasm.PointTranspose_point(diplomat_receive_buffer, field_x_field_point_this.underlying, field_y_field_point_this.underlying, field_x_field_transpose_this.underlying, field_y_field_transpose_this.underlying);
      const out = new Point(diplomat_receive_buffer, [field_x_field_point_this, field_y_field_transpose_this], [field_y_field_point_this, field_x_field_transpose_this]);
      wasm.diplomat_free(diplomat_receive_buffer, 8, 4);
      return out;
    })();
  }
}

const Scalar_box_destroy_registry = new FinalizationRegistry(underlying => {
  wasm.Scalar_destroy(underlying);
});

export class Scalar {
  #lifetimeEdges = [];
  constructor(underlying, owned, edges) {
    this.underlying = underlying;
    this.#lifetimeEdges.push(...edges);
    if (owned) {
      Scalar_box_destroy_registry.register(this, underlying);
    }
  }
}

