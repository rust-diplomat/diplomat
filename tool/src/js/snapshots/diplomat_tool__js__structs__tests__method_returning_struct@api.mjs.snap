---
source: tool/src/js/structs.rs
expression: out_texts.get(out).unwrap()
---
import wasm from "./wasm.mjs"
import * as diplomatRuntime from "./diplomat-runtime.mjs"
const diplomat_alloc_destroy_registry = new FinalizationRegistry(obj => {
  wasm.diplomat_free(obj["ptr"], obj["size"], obj["align"]);
});

const MyStruct_box_destroy_registry = new FinalizationRegistry(underlying => {
  wasm.MyStruct_destroy(underlying);
});

export class MyStruct {
  constructor(underlying) {
    this.underlying = underlying;
    MyStruct_box_destroy_registry.register(this, underlying);
  }

  get_non_opaque() {
    const diplomat_out = (() => {
      const diplomat_receive_buffer = wasm.diplomat_alloc(8, 4);
      wasm.MyStruct_get_non_opaque(diplomat_receive_buffer, this.underlying);
      const out = new NonOpaqueStruct(diplomat_receive_buffer);
      wasm.diplomat_free(diplomat_receive_buffer, 8, 4);
      return out;
    })();
    return diplomat_out;
  }
}

export class NonOpaqueStruct {
  constructor(underlying) {
    this.a = (new Uint16Array(wasm.memory.buffer, underlying + 0, 1))[0];
    this.b = (new Uint8Array(wasm.memory.buffer, underlying + 2, 1))[0];
    this.c = (new Uint32Array(wasm.memory.buffer, underlying + 4, 1))[0];
  }
}

