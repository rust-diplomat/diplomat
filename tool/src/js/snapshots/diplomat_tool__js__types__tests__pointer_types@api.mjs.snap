---
source: tool/src/js/types.rs
expression: out_texts.get(out).unwrap()
---
import wasm from "./wasm.mjs"
import * as diplomatRuntime from "./diplomat-runtime.mjs"
const diplomat_alloc_destroy_registry = new FinalizationRegistry(obj => {
  wasm.diplomat_free(obj["ptr"], obj["size"], obj["align"]);
});

const MyOpaqueStruct_box_destroy_registry = new FinalizationRegistry(underlying => {
  wasm.MyOpaqueStruct_destroy(underlying);
});

export class MyOpaqueStruct {
  constructor(underlying) {
    this.underlying = underlying;
    MyOpaqueStruct_box_destroy_registry.register(this, underlying);
  }
}

export class MyStruct {
  constructor(underlying) {
    this.a = (() => {
      const out = new MyOpaqueStruct(diplomatRuntime.ptrRead(wasm, underlying + 0));
      out.__this_lifetime_guard = this;
      return out;
    })();
    this.b = (new Uint8Array(wasm.memory.buffer, underlying + 4, 1))[0];
  }

  static new(foo, bar) {
    const diplomat_out = (() => {
      const diplomat_receive_buffer = wasm.diplomat_alloc(5, 4);
      wasm.MyStruct_new(diplomat_receive_buffer, foo.underlying, bar.underlying);
      const out = new MyStruct(diplomat_receive_buffer);
      wasm.diplomat_free(diplomat_receive_buffer, 5, 4);
      return out;
    })();
    return diplomat_out;
  }
}

