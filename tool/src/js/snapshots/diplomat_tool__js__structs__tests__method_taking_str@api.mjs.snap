---
source: tool/src/js/structs.rs
expression: out_texts.get(out).unwrap()
---
import wasm from "./wasm.mjs"
import * as diplomatRuntime from "./diplomat-runtime.mjs"
const diplomat_alloc_destroy_registry = new FinalizationRegistry(obj => {
  wasm.diplomat_free(obj["ptr"], obj["size"], obj["align"]);
});

const MyStruct_box_destroy_registry = new FinalizationRegistry(underlying => {
  wasm.MyStruct_destroy(underlying);
});

export class MyStruct {
  constructor(underlying) {
    this.underlying = underlying;
    MyStruct_box_destroy_registry.register(this, underlying);
  }

  static new_str(v) {
    let v_diplomat_bytes = (new TextEncoder()).encode(v);
    let v_diplomat_ptr = wasm.diplomat_alloc(v_diplomat_bytes.length, 1);
    let v_diplomat_buf = new Uint8Array(wasm.memory.buffer, v_diplomat_ptr, v_diplomat_bytes.length);
    v_diplomat_buf.set(v_diplomat_bytes, 0);
    const diplomat_out = new MyStruct(wasm.MyStruct_new_str(v_diplomat_ptr, v_diplomat_bytes.length));
    wasm.diplomat_free(v_diplomat_ptr, v_diplomat_bytes.length, 1);
    return diplomat_out;
  }

  set_str(new_str) {
    let new_str_diplomat_bytes = (new TextEncoder()).encode(new_str);
    let new_str_diplomat_ptr = wasm.diplomat_alloc(new_str_diplomat_bytes.length, 1);
    let new_str_diplomat_buf = new Uint8Array(wasm.memory.buffer, new_str_diplomat_ptr, new_str_diplomat_bytes.length);
    new_str_diplomat_buf.set(new_str_diplomat_bytes, 0);
    const diplomat_out = wasm.MyStruct_set_str(this.underlying, new_str_diplomat_ptr, new_str_diplomat_bytes.length);
    wasm.diplomat_free(new_str_diplomat_ptr, new_str_diplomat_bytes.length, 1);
  }
}

