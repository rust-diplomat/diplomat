---
source: tool/src/dotnet/tests.rs
expression: out_texts.get(out).unwrap()
---
// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using SomeOrg.SomeModule;
using We.Also.Need.This;
using OurOrg.OurRustLib.Diplomat;
#pragma warning restore 0105

namespace OurOrg.OurRustLib;

#nullable enable

/// <summary>
/// This should not contain any property
/// </summary>
public partial class MyStruct: IDisposable
{
    private unsafe Raw.MyStruct* _inner;

    /// <summary>
    /// Creates a managed <c>MyStruct</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe MyStruct(Raw.MyStruct* handle)
    {
        _inner = handle;
    }

    /// <summary>
    /// This should not generate a property
    /// </summary>
    /// <exception cref="DiplomatOpaqueException"></exception>
    public ulong GetFooByKey(string key)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            byte[] keyBuf = DiplomatUtils.StringToUtf8(key);
            nuint keyBufLength = (nuint)keyBuf.Length;
            fixed (byte* keyBufPtr = keyBuf)
            {
                Raw.FfiResultU64Void result = Raw.MyStruct.GetFooByKey(_inner, keyBufPtr, keyBufLength);
                if (!result.isOk)
                {
                    throw new DiplomatOpaqueException();
                }
                ulong retVal = result.Ok;
                return retVal;
            }
        }
    }

    /// <summary>
    /// This should not generate a property
    /// </summary>
    /// <exception cref="DiplomatOpaqueException"></exception>
    public void SetFooByKey(string key, long foo)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            byte[] keyBuf = DiplomatUtils.StringToUtf8(key);
            nuint keyBufLength = (nuint)keyBuf.Length;
            fixed (byte* keyBufPtr = keyBuf)
            {
                Raw.FfiResultVoidVoid result = Raw.MyStruct.SetFooByKey(_inner, keyBufPtr, keyBufLength, foo);
                if (!result.isOk)
                {
                    throw new DiplomatOpaqueException();
                }
            }
        }
    }

    /// <summary>
    /// This should not generate a property
    /// </summary>
    public void GetStrByKey(string key, DiplomatWrite writer)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            byte[] keyBuf = DiplomatUtils.StringToUtf8(key);
            nuint keyBufLength = (nuint)keyBuf.Length;
            fixed (byte* keyBufPtr = keyBuf)
            {
                Raw.MyStruct.GetStrByKey(_inner, keyBufPtr, keyBufLength, &writer);
            }
        }
    }

    /// <summary>
    /// This should not generate a property
    /// </summary>
    public string GetStrByKey(string key)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            byte[] keyBuf = DiplomatUtils.StringToUtf8(key);
            nuint keyBufLength = (nuint)keyBuf.Length;
            fixed (byte* keyBufPtr = keyBuf)
            {
                DiplomatWrite write = new DiplomatWrite();
                Raw.MyStruct.GetStrByKey(_inner, keyBufPtr, keyBufLength, &write);
                string retVal = write.ToUnicode();
                write.Dispose();
                return retVal;
            }
        }
    }

    /// <summary>
    /// This should not generate a property
    /// </summary>
    public void SetStrByKey(string key, string s)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("MyStruct");
            }
            byte[] keyBuf = DiplomatUtils.StringToUtf8(key);
            byte[] sBuf = DiplomatUtils.StringToUtf8(s);
            nuint keyBufLength = (nuint)keyBuf.Length;
            nuint sBufLength = (nuint)sBuf.Length;
            fixed (byte* keyBufPtr = keyBuf)
            {
                fixed (byte* sBufPtr = sBuf)
                {
                    Raw.MyStruct.SetStrByKey(_inner, keyBufPtr, keyBufLength, sBufPtr, sBufLength);
                }
            }
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.MyStruct* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.MyStruct.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~MyStruct()
    {
        Dispose();
    }
}
