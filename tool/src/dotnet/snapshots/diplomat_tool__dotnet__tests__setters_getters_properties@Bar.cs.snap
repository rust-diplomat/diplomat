---
source: tool/src/dotnet/tests.rs
expression: out_texts.get(out).unwrap()
---
// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using SomeOrg.SomeModule;
using We.Also.Need.This;
using OurOrg.OurRustLib.Diplomat;
#pragma warning restore 0105

namespace OurOrg.OurRustLib;

#nullable enable

public partial class Bar: IDisposable
{
    private unsafe Raw.Bar* _inner;

    public Foo Foo
    {
        get
        {
            return GetFoo();
        }
        set
        {
            SetFoo(value);
        }
    }

    public string Name
    {
        get
        {
            return GetName();
        }
        set
        {
            SetName(value);
        }
    }

    /// <summary>
    /// Creates a managed <c>Bar</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe Bar(Raw.Bar* handle)
    {
        _inner = handle;
    }

    /// <exception cref="DiplomatOpaqueException"></exception>
    /// <returns>
    /// A <c>Foo</c> allocated on Rust side.
    /// </returns>
    public Foo GetFoo()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Bar");
            }
            Raw.FfiResultBoxFooVoid result = Raw.Bar.GetFoo(_inner);
            if (!result.isOk)
            {
                throw new DiplomatOpaqueException();
            }
            Raw.Foo* retVal = result.Ok;
            return new Foo(retVal);
        }
    }

    /// <exception cref="DiplomatOpaqueException"></exception>
    public void SetFoo(Foo foo)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Bar");
            }
            Raw.Foo* fooRaw;
            fooRaw = foo.AsFFI();
            if (fooRaw == null)
            {
                throw new ObjectDisposedException("Foo");
            }
            Raw.FfiResultVoidVoid result = Raw.Bar.SetFoo(_inner, fooRaw);
            if (!result.isOk)
            {
                throw new DiplomatOpaqueException();
            }
        }
    }

    /// <exception cref="DiplomatOpaqueException"></exception>
    public void GetName(DiplomatWrite out)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Bar");
            }
            Raw.FfiResultVoidVoid result = Raw.Bar.GetName(_inner, &out);
            if (!result.isOk)
            {
                throw new DiplomatOpaqueException();
            }
        }
    }

    /// <exception cref="DiplomatOpaqueException"></exception>
    public string GetName()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Bar");
            }
            DiplomatWrite write = new DiplomatWrite();
            Raw.FfiResultVoidVoid result = Raw.Bar.GetName(_inner, &write);
            if (!result.isOk)
            {
                throw new DiplomatOpaqueException();
            }
            string retVal = write.ToUnicode();
            write.Dispose();
            return retVal;
        }
    }

    /// <exception cref="DiplomatOpaqueException"></exception>
    public void SetName(string newName)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Bar");
            }
            byte[] newNameBuf = DiplomatUtils.StringToUtf8(newName);
            nuint newNameBufLength = (nuint)newNameBuf.Length;
            fixed (byte* newNameBufPtr = newNameBuf)
            {
                Raw.FfiResultVoidVoid result = Raw.Bar.SetName(_inner, newNameBufPtr, newNameBufLength);
                if (!result.isOk)
                {
                    throw new DiplomatOpaqueException();
                }
            }
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.Bar* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.Bar.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~Bar()
    {
        Dispose();
    }
}
