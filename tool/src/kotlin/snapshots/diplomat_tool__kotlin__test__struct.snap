---
source: tool/src/kotlin/mod.rs
expression: struct_code
---
package dev.gigapixel.somelib

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure

internal interface MyNativeStructLib: Library {
    fun MyNativeStruct_new(): MyNativeStructNative
}

internal class MyNativeStructNative: Structure(), Structure.ByValue {
    @JvmField
    internal var a: Byte = 0;
    @JvmField
    internal var b: Byte = 0;
    @JvmField
    internal var c: Byte = 0;
    @JvmField
    internal var d: Short = 0;
    @JvmField
    internal var e: Short = 0;
    @JvmField
    internal var f: Int = 0;
    @JvmField
    internal var g: Int = 0;
    @JvmField
    internal var h: Long = 0;
    @JvmField
    internal var i: Long = 0;
    @JvmField
    internal var j: Int = 0;
    @JvmField
    internal var k: Float = 0.0F;
    @JvmField
    internal var l: Double = 0.0;
    @JvmField
    internal var m: Slice = Slice();
    @JvmField
    internal var n: Pointer = Pointer(0);
  
    // Define the fields of the struct
    override fun getFieldOrder(): List<String> {
        return listOf("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n")
    }
}

class MyNativeStruct internal constructor (
    internal val nativeStruct: MyNativeStructNative,
    internal val bEdges: List<Any>
    ) {
    val a: Boolean = nativeStruct.a > 0
    val b: Byte = nativeStruct.b
    val c: UByte = nativeStruct.c.toUByte()
    val d: Short = nativeStruct.d
    val e: UShort = nativeStruct.e.toUShort()
    val f: Int = nativeStruct.f
    val g: UInt = nativeStruct.g.toUInt()
    val h: Long = nativeStruct.h
    val i: ULong = nativeStruct.i.toULong()
    val j: Int = nativeStruct.j
    val k: Float = nativeStruct.k
    val l: Double = nativeStruct.l
    val m: DoubleArray = PrimitiveArrayTools.getDoubleArray(nativeStruct.m)
    val n: Opaque = Opaque(nativeStruct.n, listOf())

    companion object {
        internal val libClass: Class<MyNativeStructLib> = MyNativeStructLib::class.java
        internal val lib: MyNativeStructLib = Native.load("somelib", libClass)
        val NATIVESIZE: Long = Native.getNativeSize(MyNativeStructNative::class.java).toLong()
        
        fun new_(): MyNativeStruct {
            
            val returnVal = lib.MyNativeStruct_new();
            
            val bEdges: List<Any> = listOf()
            val returnStruct = MyNativeStruct(returnVal, bEdges)
            return returnStruct
        }
    }

}
