---
source: tool/src/kotlin/mod.rs
assertion_line: 2217
expression: struct_code
---
package dev.gigapixel.somelib

import com.sun.jna.Callback
import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure

internal interface MyNativeStructLib: Library {
    fun MyNativeStruct_new(): MyNativeStructNative
    fun MyNativeStruct_test_multi_arg_callback(f: DiplomatCallback_MyNativeStruct_test_multi_arg_callback_diplomatCallback_f_Native, x: Int): Int
    fun MyNativeStruct_get_u_byte_slice(): Slice
    fun MyNativeStruct_boolean_result(): ResultByteUnit
    fun MyNativeStruct_ubyte_result(): ResultByteUnit
}

internal class MyNativeStructNative: Structure(), Structure.ByValue {
    @JvmField
    internal var a: Byte = 0;
    @JvmField
    internal var b: Byte = 0;
    @JvmField
    internal var c: Byte = 0;
    @JvmField
    internal var d: Short = 0;
    @JvmField
    internal var e: Short = 0;
    @JvmField
    internal var f: Int = 0;
    @JvmField
    internal var g: Int = 0;
    @JvmField
    internal var h: Long = 0;
    /** Documentation for the struct field `i`
    */
    @JvmField
    internal var i: Long = 0;
    @JvmField
    internal var j: Int = 0;
    @JvmField
    internal var k: Float = 0.0F;
    @JvmField
    internal var l: Double = 0.0;
    @JvmField
    internal var m: Slice = Slice();
    @JvmField
    internal var n: Pointer = Pointer(0);
  
    // Define the fields of the struct
    override fun getFieldOrder(): List<String> {
        return listOf("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n")
    }
}


internal interface Runner_DiplomatCallback_MyNativeStruct_test_multi_arg_callback_diplomatCallback_f: Callback {
    fun invoke(lang_specific_context: Pointer?, arg0: Int, arg1: Int, arg2: Int ): Int
}

internal class DiplomatCallback_MyNativeStruct_test_multi_arg_callback_diplomatCallback_f_Native: Structure(), Structure.ByValue {
    @JvmField
    internal var data_: Pointer = Pointer(0L);
    @JvmField
    internal var run_callback: Runner_DiplomatCallback_MyNativeStruct_test_multi_arg_callback_diplomatCallback_f
        = object :  Runner_DiplomatCallback_MyNativeStruct_test_multi_arg_callback_diplomatCallback_f {
                override fun invoke(lang_specific_context: Pointer?, arg0: Int, arg1: Int, arg2: Int ): Int {
                    throw Exception("Default callback runner -- should be replaced.")
                }
            }
    @JvmField
    internal var destructor: Callback = object : Callback {
        fun invoke(obj_pointer: Pointer) {
            DiplomatJVMRuntime.dropRustCookie(obj_pointer);
        }
    };

    // Define the fields of the struct
    override fun getFieldOrder(): List<String> {
        return listOf("data_", "run_callback", "destructor")
    }
}

internal class DiplomatCallback_MyNativeStruct_test_multi_arg_callback_diplomatCallback_f internal constructor (
    internal val nativeStruct: DiplomatCallback_MyNativeStruct_test_multi_arg_callback_diplomatCallback_f_Native) {
    val data_: Pointer = nativeStruct.data_
    val run_callback: Callback = nativeStruct.run_callback
    val destructor: Callback = nativeStruct.destructor

    companion object {
        val NATIVESIZE: Long = Native.getNativeSize(DiplomatCallback_MyNativeStruct_test_multi_arg_callback_diplomatCallback_f_Native::class.java).toLong()
        
        fun fromCallback(cb: (Int, Int, Int)->Int): DiplomatCallback_MyNativeStruct_test_multi_arg_callback_diplomatCallback_f {
            val callback: Runner_DiplomatCallback_MyNativeStruct_test_multi_arg_callback_diplomatCallback_f = object :  Runner_DiplomatCallback_MyNativeStruct_test_multi_arg_callback_diplomatCallback_f {
                override fun invoke(lang_specific_context: Pointer?, arg0: Int, arg1: Int, arg2: Int ): Int {
                    return cb(arg0, arg1, arg2);
                }
            }
            val cb_wrap = DiplomatCallback_MyNativeStruct_test_multi_arg_callback_diplomatCallback_f_Native()
            cb_wrap.run_callback = callback;
            cb_wrap.data_ = DiplomatJVMRuntime.buildRustCookie(cb_wrap as Object);
            return DiplomatCallback_MyNativeStruct_test_multi_arg_callback_diplomatCallback_f(cb_wrap)
        }
    }
}
/** Documentation for the struct
*/
class MyNativeStruct internal constructor (
    internal val nativeStruct: MyNativeStructNative,
    internal val bEdges: List<Any?>
    ) {
    val a: Boolean = nativeStruct.a > 0
    val b: Byte = nativeStruct.b
    val c: UByte = nativeStruct.c.toUByte()
    val d: Short = nativeStruct.d
    val e: UShort = nativeStruct.e.toUShort()
    val f: Int = nativeStruct.f
    val g: UInt = nativeStruct.g.toUInt()
    val h: Long = nativeStruct.h
    val i: ULong = nativeStruct.i.toULong()
    val j: Int = nativeStruct.j
    val k: Float = nativeStruct.k
    val l: Double = nativeStruct.l
    val m: DoubleArray = PrimitiveArrayTools.getDoubleArray(nativeStruct.m)
    val n: Opaque = Opaque(nativeStruct.n, listOf())

    companion object {
        internal val libClass: Class<MyNativeStructLib> = MyNativeStructLib::class.java
        internal val lib: MyNativeStructLib = Native.load("somelib", libClass)
        val NATIVESIZE: Long = Native.getNativeSize(MyNativeStructNative::class.java).toLong()
        
        fun new_(): MyNativeStruct {
            
            val returnVal = lib.MyNativeStruct_new();
            
            val bEdges: List<Any?> = listOf()
            val returnStruct = MyNativeStruct(returnVal, bEdges)
            return returnStruct
        }
        
        fun testMultiArgCallback(f: (Int, Int, Int)->Int, x: Int): Int {
            
            val returnVal = lib.MyNativeStruct_test_multi_arg_callback(DiplomatCallback_MyNativeStruct_test_multi_arg_callback_diplomatCallback_f.fromCallback(f).nativeStruct, x);
            return (returnVal)
        }
        
        fun getUByteSlice(): UByteArray {
            
            val returnVal = lib.MyNativeStruct_get_u_byte_slice();
                return PrimitiveArrayTools.getUByteArray(returnVal)
        }
        
        fun booleanResult(): Result<Boolean> {
            
            val returnVal = lib.MyNativeStruct_boolean_result();
            if (returnVal.isOk == 1.toByte()) {
                return (returnVal.union.ok > 0).ok()
            } else {
                return UnitError().err()
            }
        }
        
        fun ubyteResult(): Result<UByte> {
            
            val returnVal = lib.MyNativeStruct_ubyte_result();
            if (returnVal.isOk == 1.toByte()) {
                return (returnVal.union.ok.toUByte()).ok()
            } else {
                return UnitError().err()
            }
        }
    }

}
