[config]
default_to_workspace = false



# If adding a new backend, be sure to update:
# - test-native (if necessary)
# - test-example
# - test-feature
# - gen-example
# - gen-feature
#
# You will likely also want to add {gen, test}-{feature, example}-[backend] and
# {gen, test}-[backend]

# Metatasks invoked by CI
[tasks.test-native]
description = "Test only the native"
category = "Tests"
dependencies = [
    "test-cpp",
    "test-c",
    "test-c2",
]
[tasks.gen]
category = "Code generation"
dependencies = [
    "gen-feature",
    "gen-examples",
]

# Tests
[tasks.test-all]
category = "Tests"
dependencies = [
    "test-example",
    "test-feature",
]

[tasks.test-cpp]
category = "Tests"
dependencies = [
    "test-cpp-example",
    "test-cpp-feature",
]
[tasks.test-cpp2]
category = "Tests"
dependencies = [
    "test-cpp2-example",
    "test-cpp2-feature",
]
[tasks.test-c]
category = "Tests"
dependencies = [
    "test-c-example",
]
[tasks.test-c2]
category = "Tests"
dependencies = [
    "test-c2-example",
    "test-c2-example-self-contained",
    "test-c2-feature-self-contained",
]
[tasks.test-wasm]
category = "Tests"
dependencies = [
    "test-wasm-example",
    "test-wasm-example-app",
    "test-wasm-feature",
]
[tasks.test-dart]
category = "Tests"
dependencies = [
    "test-dart-example",
    "test-dart-feature",
]
[tasks.test-example]
category = "Tests"
dependencies = [
    "test-cpp-example",
    "test-cpp2-example",
    "test-c-example",
    "test-c2-example",
    "test-wasm-example",
    "test-dart-example",
]

[tasks.test-feature]
category = "Tests"
dependencies = [
    "test-cpp-feature",
    "test-cpp2-feature",
    "test-wasm-feature",
    "test-dart-feature",
]

[tasks.test-cpp-example]
category = "Tests"
dependencies = ["build-example"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd example/cpp
rm tests/*.out
exec --fail-on-error make
'''

[tasks.test-cpp2-example]
category = "Tests"
dependencies = ["build-example"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd example/cpp2
rm tests/*.out
exec --fail-on-error make
'''

[tasks.test-cpp-feature]
category = "Tests"
dependencies = ["build-feature"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd feature_tests/cpp
rm tests/*.out
exec --fail-on-error make
'''

[tasks.test-cpp2-feature]
category = "Tests"
dependencies = ["build-feature"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd feature_tests/cpp2
rm tests/*.out
exec --fail-on-error make
'''

[tasks.test-c-example]
category = "Tests"
dependencies = ["build-example"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd example/c
rm *.out
exec --fail-on-error make
'''

[tasks.test-c2-example]
category = "Tests"
dependencies = ["build-example"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd example/c2
rm *.out
exec --fail-on-error make
'''

[tasks.test-wasm-example]
category = "Tests"
dependencies = ["build-example-wasm"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd example/js/
cp ../../target/wasm32-unknown-unknown/debug/diplomat_example.wasm lib/api/diplomat_example.wasm
cd lib
exec --fail-on-error npm install
exec --fail-on-error npm run test
'''

[tasks.test-wasm-example-app]
category = "Tests"
dependencies = ["build-example-wasm"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd example/js/
cp ../../target/wasm32-unknown-unknown/debug/diplomat_example.wasm lib/api/diplomat_example.wasm
cd app
exec --fail-on-error npm install
exec --fail-on-error npm run build
'''

[tasks.test-wasm-feature]
category = "Tests"
dependencies = ["build-feature-wasm"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd feature_tests/js/
cp ../../target/wasm32-unknown-unknown/debug/diplomat_feature_tests.wasm api/diplomat_feature_tests.wasm
cd app
exec --fail-on-error npm install
exec --fail-on-error npm run test
'''

[tasks.test-dart-example]
category = "Tests"
dependencies = ["build-example"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd example/dart/
exec --fail-on-error dart test
'''

[tasks.test-dart-feature]
category = "Tests"
dependencies = ["build-feature"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd feature_tests/dart/
exec --fail-on-error dart test
'''

[tasks.test-c2-example-self-contained]
category = "Tests"
dependencies = ["build-example"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd example/c2/include
files_list = glob_array "./*.h"
for file in ${files_list}
    exec gcc ${file}
end
'''

[tasks.test-c2-feature-self-contained]
category = "Tests"
dependencies = ["build-example"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd feature_tests/c2/include
files_list = glob_array "./*.h"
for file in ${files_list}
    exec gcc ${file}
end
'''

# Generation
[tasks.gen-feature]
category = "Code generation"
dependencies = [
    "gen-feature-cpp",
    "gen-feature-cpp2",
    "gen-feature-c",
    "gen-feature-c2",
    "gen-feature-js",
    "gen-feature-dotnet",
    "gen-feature-dart",
]

[tasks.gen-examples]
category = "Code generation"
dependencies = [
    "gen-examples-cpp",
    "gen-examples-cpp2",
    "gen-examples-c",
    "gen-examples-c2",
    "gen-examples-js",
    "gen-examples-dart",
]
[tasks.gen-cpp]
category = "Code generation"
dependencies = [
    "gen-feature-cpp",
    "gen-examples-cpp"
]
[tasks.gen-c]
category = "Code generation"
dependencies = [
    "gen-feature-c",
    "gen-examples-c"
]
[tasks.gen-c2]
category = "Code generation"
dependencies = [
    "gen-feature-c2",
    "gen-examples-c2"
]
[tasks.gen-cpp2]
category = "Code generation"
dependencies = [
    "gen-feature-cpp2",
    "gen-examples-cpp2"
]
[tasks.gen-js]
category = "Code generation"
dependencies = [
    "gen-feature-js",
    "gen-examples-js"
]
[tasks.gen-dotnet]
category = "Code generation"
dependencies = [
    "gen-feature-dotnet",
]
[tasks.gen-dart]
category = "Code generation"
dependencies = [
    "gen-feature-dart",
    "gen-examples-dart",
]



[tasks.gen-feature-cpp]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests cpp include docs/source
'''


[tasks.gen-examples-cpp]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example cpp include docs/source "--docs-base-urls=*:https://unicode-org.github.io/icu4x-docs/doc/"
'''

[tasks.gen-feature-c]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests c include
'''

[tasks.gen-examples-c]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example c include
'''

[tasks.gen-feature-c2]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests c2 include
'''

[tasks.gen-examples-c2]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example c2 include
'''

[tasks.gen-feature-cpp2]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests cpp2 include
'''

[tasks.gen-examples-cpp2]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example cpp2 include
'''

[tasks.gen-feature-js]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests js api docs/source
'''

[tasks.gen-examples-js]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example js lib/api lib/docs/source "--docs-base-urls=*:https://unicode-org.github.io/icu4x-docs/doc/"
'''

[tasks.gen-feature-dotnet]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests dotnet Lib/Generated "" "-l dotnet/dotnet-interop-conf.toml"
'''

[tasks.gen-feature-dart]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests dart lib/src
'''

[tasks.gen-examples-dart]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example dart lib/src
'''

# Build deps

[tasks.build-tool]
description = "Build diplomat-tool"
category = "Plumbing"
command = "cargo"
args = ["build", "-p", "diplomat-tool"]
[tasks.build-example]
description = "Build examples"
category = "Plumbing"
command = "cargo"
args = ["build", "-p", "diplomat-example"]
[tasks.build-feature]
description = "Build feature_tests"
category = "Plumbing"
command = "cargo"
args = ["build", "-p", "diplomat-feature-tests"]
[tasks.build-example-wasm]
description = "Build feature_tests for wasm"
category = "Plumbing"
command = "cargo"
args = ["build", "-p", "diplomat-example", "--target", "wasm32-unknown-unknown"]
[tasks.build-feature-wasm]
description = "Build feature_tests for wasm"
category = "Plumbing"
command = "cargo"
args = ["build", "-p", "diplomat-feature-tests", "--target", "wasm32-unknown-unknown"]
