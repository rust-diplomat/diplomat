[config]
default_to_workspace = false



# If adding a new backend, be sure to update:
# - test-native (if necessary)
# - test-example
# - test-feature
# - gen-example
# - gen-feature
#
# You will likely also want to add {gen, test}-{feature, example}-[backend] and
# {gen, test}-[backend]

# Metatasks invoked by CI
[tasks.test-native]
description = "Test only the native"
category = "Tests"
dependencies = [
    "test-cpp",
    "test-c",
    "test-c2",
]
[tasks.gen]
category = "Code generation"
dependencies = [
    "gen-feature",
    "gen-example",
]

# Tests
[tasks.test-all]
category = "Tests"
dependencies = [
    "test-example",
    "test-feature",
]

[tasks.test-cpp]
category = "Tests"
dependencies = [
    "test-cpp-example",
    "test-cpp-feature",
]
[tasks.test-cpp2]
category = "Tests"
dependencies = [
    "test-cpp2-example",
    "test-cpp2-feature",
]
[tasks.test-c]
category = "Tests"
dependencies = [
    "test-c-example",
]
[tasks.test-c2]
category = "Tests"
dependencies = [
    "test-c2-example",
    "test-c2-example-self-contained",
    "test-c2-feature-self-contained",
]
[tasks.test-js]
category = "Tests"
dependencies = [
    "test-js-example",
    "test-js-example-app",
    "test-js-feature",
]
[tasks.test-js2]
category = "Tests"
dependencies = [
    "test-js2-feature",
]

[tasks.test-dart]
category = "Tests"
dependencies = [
    "test-dart-example",
    "test-dart-feature",
]
[tasks.test-kotlin]
category = "Tests"
dependencies = [
    "test-kotlin-example",
    "test-kotlin-feature",
]
[tasks.test-example]
category = "Tests"
dependencies = [
    "test-cpp-example",
    "test-cpp2-example",
    "test-c-example",
    "test-c2-example",
    "test-js-example",
    "test-dart-example",
    "test-kotlin-example",
]

[tasks.test-feature]
category = "Tests"
dependencies = [
    "test-cpp-feature",
    "test-cpp2-feature",
    "test-js-feature",
    "test-js2-feature",
    "test-dart-feature",
    "test-kotlin-feature",
]

[tasks.test-cpp-example]
category = "Tests"
dependencies = ["build-example"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd example/cpp
rm tests/*.out
exec --fail-on-error make
'''

[tasks.test-cpp2-example]
category = "Tests"
dependencies = ["build-example"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd example/cpp2
rm tests/*.out
exec --fail-on-error make
'''

[tasks.test-cpp-feature]
category = "Tests"
dependencies = ["build-feature"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd feature_tests/cpp
rm tests/*.out
exec --fail-on-error make
'''

[tasks.test-cpp2-feature]
category = "Tests"
dependencies = ["build-feature"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd feature_tests/cpp2
rm tests/*.out
exec --fail-on-error make
'''

[tasks.test-c-example]
category = "Tests"
dependencies = ["build-example"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd example/c
rm *.out
exec --fail-on-error make
'''

[tasks.test-c2-example]
category = "Tests"
dependencies = ["build-example"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd example/c2
rm *.out
exec --fail-on-error make
'''

[tasks.test-js-example]
category = "Tests"
dependencies = ["build-example-wasm"]
script_runner = "@shell"
script = '''
cd example/js/
cp ../../target/wasm32-unknown-unknown/debug/diplomat_example.wasm lib/api/diplomat_example.wasm
cd lib
npm install && npm run test
'''

[tasks.test-js-example-app]
category = "Tests"
dependencies = ["build-example-wasm"]
script_runner = "@shell"
script = '''
cd example/js/
cp ../../target/wasm32-unknown-unknown/debug/diplomat_example.wasm lib/api/diplomat_example.wasm
cd app
npm install && npm run build
'''

[tasks.test-js-feature]
category = "Tests"
dependencies = ["build-feature-wasm"]
script_runner = "@shell"
script = '''
cd feature_tests/js/
cp ../../target/wasm32-unknown-unknown/debug/diplomat_feature_tests.wasm api/diplomat_feature_tests.wasm
npm install && npm run test
'''

[tasks.test-js2-feature]
category = "Tests"
dependencies = ["build-feature-wasm"]
script_runner = "@shell"
script = '''
cd feature_tests/js2/
cp ../../target/wasm32-unknown-unknown/debug/diplomat_feature_tests.wasm api/diplomat_feature_tests.wasm
npm install && npm run test
'''

[tasks.test-dart-example]
category = "Tests"
script_runner = "@duckscript"
dependencies = ["build-example"]
script = '''
exit_on_error true
cd example/dart/
exec --fail-on-error dart --enable-experiment=native-assets pub get
exec --fail-on-error dart --enable-experiment=native-assets test
'''

[tasks.test-dart-feature]
category = "Tests"
script_runner = "@duckscript"
dependencies = ["build-feature"]
script = '''
exit_on_error true
cd feature_tests/dart/
exec --fail-on-error dart --enable-experiment=native-assets pub get
exec --fail-on-error dart --enable-experiment=native-assets test
'''

[tasks.test-kotlin-example]
category = "Tests"
script_runner = "@duckscript"
dependencies = ["build-example"]
script = '''
exit_on_error true
cp target/debug/libdiplomat_example.dylib example/kotlin/somelib/libsomelib.dylib
cd example/kotlin/somelib
exec --fail-on-error gradle test --warning-mode all
'''

[tasks.test-kotlin-feature]
category = "Tests"
script_runner = "@duckscript"
dependencies = ["build-feature"]
script = '''
exit_on_error true
cp target/debug/libdiplomat_feature_tests.dylib feature_tests/kotlin/somelib/libsomelib.dylib
cd feature_tests/kotlin/somelib
exec --fail-on-error gradle test --warning-mode all 
'''

[tasks.test-c2-example-self-contained]
category = "Tests"
dependencies = ["build-example"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd example/c2/include
files_list = glob_array "./*.h"
for file in ${files_list}
    exec --fail-on-error gcc ${file}
end
'''

[tasks.test-c2-feature-self-contained]
category = "Tests"
dependencies = ["build-example"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd feature_tests/c2/include
files_list = glob_array "./*.h"
for file in ${files_list}
    exec --fail-on-error gcc ${file}
end
'''

[tasks.test-cpp2-example-self-contained]
category = "Tests"
script_runner = "@duckscript"
script = '''
exit_on_error true
cxx = get_env CXX
if is_empty ${cxx}
    cxx = set "g++"
end
cxx_std = get_env CXX_STD
if is_empty ${cxx_std}
    cxx_std = set "c++17"
end

cd example/cpp2/include
files_list = glob_array "./*.hpp"
for file in ${files_list}
    echo "Testing self-containedness of ${file}"
    exec --fail-on-error ${cxx}  -std=${cxx_std} ${file}
end
'''

[tasks.test-cpp2-feature-self-contained]
category = "Tests"
script_runner = "@duckscript"
script = '''
exit_on_error true
cxx = get_env CXX
if is_empty ${cxx}
    cxx = set "g++"
end
cxx_std = get_env CXX_STD
if is_empty ${cxx_std}
    cxx_std = set "c++17"
end

cd feature_tests/cpp2/include
files_list = glob_array "./*.hpp"
for file in ${files_list}
    echo "Testing self-containedness of ${file}"
    exec --fail-on-error ${cxx}  -std=${cxx_std} ${file}

end
'''

[tasks.test-cpp2-self-contained]
category = "Tests"
dependencies = [
    "test-cpp2-feature-self-contained",
    "test-cpp2-example-self-contained",
]


# Generation
[tasks.gen-feature]
category = "Code generation"
dependencies = [
    "gen-cpp-feature",
    "gen-cpp2-feature",
    "gen-c-feature",
    "gen-c2-feature",
    "gen-js-feature",
    "gen-js2-feature",
    "gen-dotnet-feature",
    "gen-dart-feature",
    "gen-kotlin-feature",
]

[tasks.gen-example]
category = "Code generation"
dependencies = [
    "gen-cpp-example",
    "gen-cpp2-example",
    "gen-c-example",
    "gen-c2-example",
    "gen-js-example",
    "gen-js2-example",
    "gen-dart-example",
    "gen-kotlin-example",
]
[tasks.gen-cpp]
category = "Code generation"
dependencies = [
    "gen-cpp-feature",
    "gen-cpp-example"
]
[tasks.gen-c]
category = "Code generation"
dependencies = [
    "gen-c-feature",
    "gen-c-example"
]
[tasks.gen-c2]
category = "Code generation"
dependencies = [
    "gen-c2-feature",
    "gen-c2-example"
]
[tasks.gen-cpp2]
category = "Code generation"
dependencies = [
    "gen-cpp2-feature",
    "gen-cpp2-example"
]
[tasks.gen-js]
category = "Code generation"
dependencies = [
    "gen-js-feature",
    "gen-js-example"
]
[tasks.gen-dotnet]
category = "Code generation"
dependencies = [
    "gen-dotnet-feature",
]
[tasks.gen-dart]
category = "Code generation"
dependencies = [
    "gen-dart-feature",
    "gen-dart-example",
]
[tasks.gen-kotlin]
category = "Code generation"
dependencies = [
    "gen-kotlin-feature",
    "gen-kotlin-example",
]



[tasks.gen-cpp-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests cpp include docs/source
'''


[tasks.gen-cpp-example]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example cpp include docs/source "--docs-base-urls=*:https://unicode-org.github.io/icu4x-docs/doc/"
'''

[tasks.gen-c-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests c include
'''

[tasks.gen-c-example]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example c include
'''

[tasks.gen-c2-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests c2 include
'''

[tasks.gen-c2-example]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example c2 include
'''

[tasks.gen-cpp2-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests cpp2 include
'''

[tasks.gen-cpp2-example]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example cpp2 include
'''

[tasks.gen-js-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests js api docs/source
'''

[tasks.gen-js-example]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example js lib/api lib/docs/source "--docs-base-urls=*:https://unicode-org.github.io/icu4x-docs/doc/"
'''

[tasks.gen-js2-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests js2 api
'''

[tasks.gen-js2-example]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example js2 api
'''

[tasks.gen-dotnet-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests dotnet Lib/Generated "" "-l dotnet/dotnet-interop-conf.toml"
'''

[tasks.gen-dart-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests dart lib/src
'''

[tasks.gen-dart-example]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example dart lib/src
'''

# this task generates all of the kotlin code but does not copy generated project files over 
# we only copy the generated main src files to preserve the tests
[tasks.gen-kotlin-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests kotlin somelib "" "-l diplomat-kt-conf.toml" /src/main/kotlin
'''

[tasks.gen-kotlin-example]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example kotlin somelib "" "-l diplomat-kt-conf.toml" /src/main/kotlin
'''

# Build deps

[tasks.build-tool]
description = "Build diplomat-tool"
category = "Plumbing"
command = "cargo"
args = ["build", "-p", "diplomat-tool"]
[tasks.build-example]
description = "Build example"
category = "Plumbing"
command = "cargo"
args = ["build", "-p", "diplomat-example"]
[tasks.build-feature]
description = "Build feature_tests"
category = "Plumbing"
command = "cargo"
args = ["build", "-p", "diplomat-feature-tests"]
[tasks.build-example-wasm]
description = "Build feature_tests for wasm"
category = "Plumbing"
command = "cargo"
args = ["build", "-p", "diplomat-example", "--target", "wasm32-unknown-unknown"]
[tasks.build-feature-wasm]
description = "Build feature_tests for wasm"
category = "Plumbing"
command = "cargo"
args = ["build", "-p", "diplomat-feature-tests", "--target", "wasm32-unknown-unknown"]


[tasks.bench-rust-example]
description = "Benchmark rust example"
category = "Benchmark"
script = '''
cargo bench --package diplomat-example
'''
[tasks.bench-kotlin-example]
description = "Benchmark kotlin example"
category = "Benchmark"
dependencies = ["gen-kotlin-example", "test-kotlin-example"]
script = '''
cd example/kotlin/somelib
gradle jmh --warning-mode all
'''
