[config]
default_to_workspace = false

# If adding a new backend, be sure to update:
# - test-native (if necessary)
# - test-example
# - test-feature
# - gen-example
# - gen-feature
#
# You will likely also want to add {gen, test}-{feature, example}-[backend] and
# {gen, test}-[backend]

[env]
# C++ flags to pass when running check-cpp with clang
# Based on what our clients care about
CXX_FLAGS_FOR_CHECK = "-Wc++98-compat-extra-semi -Wextra-semi"

# Metatasks invoked by CI
[tasks.test-native]
description = "Test only the native"
category = "Tests"
dependencies = ["test-cpp", "test-c"]

[tasks.gen]
category = "Code generation"
dependencies = ["gen-feature", "gen-example"]

# Tests
[tasks.test-all]
category = "Tests"
dependencies = ["test-example", "test-feature"]

[tasks.test-cpp]
category = "Tests"
dependencies = ["test-cpp-example", "test-cpp-feature"]

[tasks.test-c]
category = "Tests"
dependencies = ["test-c-example"]

[tasks.test-js]
category = "Tests"
dependencies = ["test-js-feature"]

[tasks.test-demo]
category = "Tests"
dependencies = ["test-demo-feature", "test-demo-example"]

[tasks.test-dart]
category = "Tests"
dependencies = ["test-dart-example", "test-dart-feature"]

[tasks.test-kotlin]
category = "Tests"
dependencies = ["test-kotlin-example", "test-kotlin-feature"]

[tasks.test-nanobind]
category = "Tests"
dependencies = ["test-nanobind-feature"]

[tasks.test-example]
category = "Tests"
dependencies = [
    "test-cpp-example",
    "test-c-example",
    "test-demo-example",
    "test-dart-example",
    "test-kotlin-example",

]

[tasks.test-feature]
category = "Tests"
dependencies = [
    "test-cpp-feature",
    "test-js-feature",
    "test-demo-feature",
    "test-dart-feature",
    "test-kotlin-feature",
    "test-nanobind-feature",
]

[tasks.test-cpp-example]
category = "Tests"
dependencies = ["build-example"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd example/cpp
rm tests/*.out
exec --fail-on-error make
'''

[tasks.test-cpp-feature]
category = "Tests"
dependencies = ["build-feature"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd feature_tests/cpp
rm tests/*.out
exec --fail-on-error make
'''

[tasks.test-c-example]
category = "Tests"
dependencies = ["build-example"]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd example/c
rm *.out
exec --fail-on-error make
'''

[tasks.test-js-feature]
category = "Tests"
dependencies = ["build-feature-wasm"]
script_runner = "@shell"
script = '''
cd feature_tests/js/
cp ../../target/wasm32-unknown-unknown/debug/diplomat_feature_tests.wasm api/diplomat_feature_tests.wasm
npm ci && npm run test -w stable
'''


[tasks.test-demo-feature]
category = "Tests"
dependencies = ["build-feature-wasm"]
script_runner = "@shell"
script = '''
cd feature_tests/demo_gen
cp ../../target/wasm32-unknown-unknown/debug/diplomat_feature_tests.wasm ../js/api/diplomat_feature_tests.wasm
npm ci && npm run test
'''

[tasks.test-demo-example]
category = "Tests"
dependencies = ["build-example-wasm"]
script_runner = "@shell"
script = '''
cd example/demo_gen
cp ../../target/wasm32-unknown-unknown/debug/diplomat_example.wasm ../js/lib/api/diplomat_example.wasm
npm ci && npm run test
'''

[tasks.test-dart-example]
category = "Tests"
script_runner = "@duckscript"
dependencies = ["build-example"]
script = '''
exit_on_error true
cd example/dart/
exec --fail-on-error dart format --set-exit-if-changed .
exec --fail-on-error dart pub get
exec --fail-on-error dart analyze
exec --fail-on-error dart --enable-experiment=native-assets test
'''

[tasks.test-dart-feature]
category = "Tests"
script_runner = "@duckscript"
dependencies = ["build-feature"]
script = '''
exit_on_error true
cd feature_tests/dart/
exec --fail-on-error dart format --set-exit-if-changed .
exec --fail-on-error dart pub get
exec --fail-on-error dart analyze
exec --fail-on-error dart --enable-experiment=native-assets test
'''

[tasks.test-kotlin-example.mac]
env = { "OUT_FILE" = "dylib" }

[tasks.test-kotlin-example.linux]
env = { "OUT_FILE" = "so", "LD_LIBRARY_PATH" = "./" }

[tasks.test-kotlin-example]
category = "Tests"
script_runner = "@duckscript"
dependencies = ["build-example-jvm"]
script = '''
exit_on_error true
cp target/debug/libdiplomat_example.${OUT_FILE} example/kotlin/somelib/libsomelib.${OUT_FILE}
cd example/kotlin/somelib
exec --fail-on-error gradle test --warning-mode all
'''

[tasks.test-kotlin-feature.mac]
env = { "OUT_FILE" = "dylib" }

[tasks.test-kotlin-feature.linux]
env = { "OUT_FILE" = "so", "LD_LIBRARY_PATH" = "./" }

[tasks.test-kotlin-feature]
category = "Tests"
script_runner = "@duckscript"
dependencies = ["build-feature-jvm"]
script = '''
exit_on_error true
cp target/debug/libdiplomat_feature_tests.${OUT_FILE} feature_tests/kotlin/somelib/libsomelib.${OUT_FILE}
cd feature_tests/kotlin/somelib
exec --fail-on-error gradle test  --warning-mode all 
'''

[tasks.test-nanobind-feature]
category = "Tests"
dependencies = ["build-feature", "fetch-nanobind"]
script_runner = "@duckscript"
script = '''
exit_on_error true
exec --fail-on-error uvx --with feature_tests/nanobind --refresh-package somelib pytest feature_tests/nanobind/test/
'''

[tasks.check-c-example]
category = "Tests"
script_runner = "@duckscript"
script = '''
exit_on_error true
cc = get_env CC
if is_empty ${cc}
    cc = set "gcc"
end
c_std = get_env C_STD
if is_empty ${c_std}
    c_std = set "c11"
end

cd example/c/include
files_list = glob_array "./*.h"
exit_code = set 0
for file in ${files_list}
    echo "Checking ${file}"
    output = exec --get-exit-code ${cc} -std=${c_std} -pedantic-errors -Wall ${file}
    exit_code = set ${exit_code} or ${output}
end
exit ${exit_code}
'''

[tasks.check-c-feature]
category = "Tests"
script_runner = "@duckscript"
script = '''
exit_on_error true
cc = get_env CC
if is_empty ${cc}
    cc = set "gcc"
end
c_std = get_env C_STD
if is_empty ${c_std}
    c_std = set "c11"
end

cd feature_tests/c/include
files_list = glob_array "./*.h"
exit_code = set 0
for file in ${files_list}
    echo "Checking ${file}"
    output = exec --get-exit-code ${cc} -std=${c_std} -pedantic-errors -Wall ${file}
    exit_code = set ${exit_code} or ${output}
end
exit ${exit_code}
'''

[tasks.check-c]
category = "Tests"
dependencies = ["check-c-feature", "check-c-example"]

[tasks.check-cpp-example]
category = "Tests"
script_runner = "@duckscript"
script = '''
exit_on_error true
cxx = get_env CXX
cxx_flags = set ""
if is_empty ${cxx}
    cxx = set "clang++"
end
if starts_with ${cxx} "clang"
    cxx_flags = set "${CXX_FLAGS_FOR_CHECK}"
end
cxx_std = get_env CXX_STD
if is_empty ${cxx_std}
    cxx_std = set "c++17"
end

cd example/cpp/include
files_list = glob_array "./**/*.hpp"
exit_code = set 0
for file in ${files_list}
    echo "Checking ${file}"
    output = exec --get-exit-code ${cxx} -std=${cxx_std} -pedantic-errors -Wall %{cxx_flags} ${file}
    exit_code = set ${exit_code} or ${output}
end
exit ${exit_code}
'''

[tasks.check-cpp-feature]
category = "Tests"
script_runner = "@duckscript"
script = '''
exit_on_error true
cxx = get_env CXX
cxx_flags = set ""
if is_empty ${cxx}
    cxx = set "clang++"
end
if starts_with ${cxx} "clang"
    cxx_flags = set "${CXX_FLAGS_FOR_CHECK}"
end
cxx_std = get_env CXX_STD
if is_empty ${cxx_std}
    cxx_std = set "c++17"
end

cd feature_tests/cpp/include
files_list = glob_array "./**/*.hpp"
exit_code = set 0
for file in ${files_list}
    echo "Checking ${file}"
    output = exec --get-exit-code ${cxx} -std=${cxx_std} -pedantic-errors -Wall %{cxx_flags} ${file}
    exit_code = set ${exit_code} or ${output}
end
exit ${exit_code}
'''

[tasks.check-cpp]
category = "Tests"
dependencies = ["check-cpp-feature", "check-cpp-example"]


[tasks.check-whitespace]
category = "Tests"
script_runner = "@duckscript"
script = '''
# Only these backends have clean output
backends = array "c" "cpp" "js" "dart"
tests = array "feature_tests" "example"
for test in ${tests}
 for backend in ${backends}
    echo "Looking for trailing whitespace in generated code in ${test}/${backend}"
    exit_code = exec --get-exit-code grep -Hrn \\s\\+$ "${test}/${backend}"
    if eq ${exit_code} 0
        echo "Found trailing whitespace (or Windows line endings) in ${test}/${backend}"
        exit 1
    end
 end
end

'''

# Generation
[tasks.gen-feature]
category = "Code generation"
dependencies = [
    "gen-cpp-feature",
    "gen-c-feature",
    "gen-js-feature",
    "gen-demo-feature",
    "gen-dart-feature",
    "gen-kotlin-feature",
    "gen-nanobind-feature",
]

[tasks.gen-example]
category = "Code generation"
dependencies = [
    "gen-cpp-example",
    "gen-c-example",
    "gen-js-example",
    "gen-demo-example",
    "gen-dart-example",
    "gen-kotlin-example",
]


[tasks.gen-c]
category = "Code generation"
dependencies = ["gen-c-feature", "gen-c-example"]
[tasks.gen-cpp]
category = "Code generation"
dependencies = ["gen-cpp-feature", "gen-cpp-example"]

[tasks.gen-dart]
category = "Code generation"
dependencies = ["gen-dart-feature", "gen-dart-example"]
[tasks.gen-kotlin]
category = "Code generation"
dependencies = ["gen-kotlin-feature", "gen-kotlin-example"]

[tasks.gen-js]
category = "Code generation"
dependencies = ["gen-js-feature", "gen-js-example"]

[tasks.gen-c-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests c include
'''

[tasks.gen-c-example]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example c include
'''

[tasks.gen-cpp-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests cpp include 
'''

[tasks.gen-cpp-example]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example cpp include
'''


[tasks.gen-js-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true

!include_files ./support/functions.ds
generate_js spec feature_tests .
'''

[tasks.gen-js-example]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true

!include_files ./support/functions.ds
generate_js spec example lib
'''

[tasks.gen-demo-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests demo_gen demo
'''

[tasks.gen-demo-example]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example demo_gen demo
'''

[tasks.gen-dart-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests dart lib/src
'''

[tasks.gen-dart-example]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example dart lib/src
'''

# this task generates all of the kotlin code but does not copy generated project files over 
# we only copy the generated main src files to preserve the tests
[tasks.gen-kotlin-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests kotlin somelib "--config kotlin.scaffold=false" /src/main/kotlin
'''

[tasks.gen-kotlin-example]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic example kotlin somelib "--config kotlin.scaffold=false" /src/main/kotlin
'''

[tasks.gen-nanobind-feature]
category = "Code generation"
script_runner = "@duckscript"
script = '''
exit_on_error true
!include_files ./support/functions.ds
generate_generic feature_tests nanobind src/cpp 
mv nanobind/src/cpp/somelib_ext.cpp nanobind/src/somelib_ext.cpp
rm -rf nanobind/src/include
mv nanobind/src/cpp/include nanobind/src/
rm -fr nanobind/src/sub_modules
mv nanobind/src/cpp/sub_modules nanobind/src/
rm -rf nanobind/src/cpp/
'''
# Build deps

[tasks.build-tool]
description = "Build diplomat-tool"
category = "Plumbing"
command = "cargo"
args = ["build", "-p", "diplomat-tool"]
[tasks.build-example]
description = "Build example"
category = "Plumbing"
command = "cargo"
args = ["build", "-p", "diplomat-example"]
[tasks.build-feature]
description = "Build feature_tests"
category = "Plumbing"
command = "cargo"
args = ["build", "-p", "diplomat-feature-tests"]
[tasks.build-example-wasm]
# Can be set to stable once the -Zwasm-c-abi=spec option is the default on stable
toolchain = "nightly"
description = "Build feature_tests for wasm"
category = "Plumbing"
command = "cargo"
args = ["build", "-p", "diplomat-example", "--target", "wasm32-unknown-unknown"]

[tasks.build-feature-wasm]
# Can be set to stable once the -Zwasm-c-abi=spec option is the default on stable
toolchain = "nightly"
description = "Build feature_tests for wasm"
category = "Plumbing"
command = "cargo"
args = [
    "build",
    "-p",
    "diplomat-feature-tests",
    "--target",
    "wasm32-unknown-unknown",
]

[tasks.build-example-jvm]
description = "Build feature_tests for wasm"
category = "Plumbing"
command = "cargo"
args = [
    "build",
    "-p",
    "diplomat-example",
    "--features",
    "diplomat-runtime/jvm-callback-support",
]
[tasks.build-feature-jvm]
description = "Build feature_tests for wasm"
category = "Plumbing"
command = "cargo"
args = [
    "build",
    "-p",
    "diplomat-feature-tests",
    "--features",
    "diplomat-runtime/jvm-callback-support",
]

[tasks.fetch-nanobind]
description = "Fetch nanobind library"
category = "Plumbing"
script_runner = "@duckscript"
script = '''
mkdir vendor
cd vendor
nanobind_present = is_path_exists nanobind
if !nanobind_present
    exec git clone https://github.com/wjakob/nanobind.git --depth=1 -b "v2.4.0" --recurse-submodules -q
end
'''

[tasks.bench-rust-example]
description = "Benchmark rust example"
category = "Benchmark"
script = '''
cargo bench --package diplomat-example
'''
[tasks.bench-kotlin-example]
description = "Benchmark kotlin example"
category = "Benchmark"
dependencies = ["gen-kotlin-example", "test-kotlin-example"]
script = '''
cd example/kotlin/somelib
gradle jmh --warning-mode all
'''
