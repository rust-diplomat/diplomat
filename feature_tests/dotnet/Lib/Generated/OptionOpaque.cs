// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using DiplomatFeatures.Diplomat;
#pragma warning restore 0105

namespace DiplomatFeatures;

#nullable enable

public partial class OptionOpaque: IDisposable
{
    private unsafe Raw.OptionOpaque* _inner;

    /// <summary>
    /// Creates a managed <c>OptionOpaque</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe OptionOpaque(Raw.OptionOpaque* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>OptionOpaque</c> allocated on Rust side.
    /// </returns>
    public static OptionOpaque? New(int i)
    {
        unsafe
        {
            Raw.OptionOpaque* retVal = Raw.OptionOpaque.New(i);
            if (retVal == null)
            {
                return null;
            }
            return new OptionOpaque(retVal);
        }
    }

    /// <returns>
    /// A <c>OptionOpaque</c> allocated on Rust side.
    /// </returns>
    public static OptionOpaque? NewNone()
    {
        unsafe
        {
            Raw.OptionOpaque* retVal = Raw.OptionOpaque.NewNone();
            if (retVal == null)
            {
                return null;
            }
            return new OptionOpaque(retVal);
        }
    }

    /// <returns>
    /// A <c>OptionStruct</c> allocated on C# side.
    /// </returns>
    public static OptionStruct? Returns()
    {
        unsafe
        {
            Options without a pointer type are not yet supported retVal = Raw.OptionOpaque.Returns();
            if (retVal == null)
            {
                return null;
            }
            return new OptionStruct(retVal);
        }
    }

    public nint? OptionIsize()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("OptionOpaque");
            }
            Options without a pointer type are not yet supported retVal = Raw.OptionOpaque.OptionIsize(_inner);
            if (retVal == null)
            {
                return null;
            }
            return retVal;
        }
    }

    public nuint? OptionUsize()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("OptionOpaque");
            }
            Options without a pointer type are not yet supported retVal = Raw.OptionOpaque.OptionUsize(_inner);
            if (retVal == null)
            {
                return null;
            }
            return retVal;
        }
    }

    public int? OptionI32()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("OptionOpaque");
            }
            Options without a pointer type are not yet supported retVal = Raw.OptionOpaque.OptionI32(_inner);
            if (retVal == null)
            {
                return null;
            }
            return retVal;
        }
    }

    public uint? OptionU32()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("OptionOpaque");
            }
            Options without a pointer type are not yet supported retVal = Raw.OptionOpaque.OptionU32(_inner);
            if (retVal == null)
            {
                return null;
            }
            return retVal;
        }
    }

    /// <returns>
    /// A <c>OptionStruct</c> allocated on C# side.
    /// </returns>
    public static OptionStruct NewStruct()
    {
        unsafe
        {
            Raw.OptionStruct retVal = Raw.OptionOpaque.NewStruct();
            return new OptionStruct(retVal);
        }
    }

    /// <returns>
    /// A <c>OptionStruct</c> allocated on C# side.
    /// </returns>
    public static OptionStruct NewStructNones()
    {
        unsafe
        {
            Raw.OptionStruct retVal = Raw.OptionOpaque.NewStructNones();
            return new OptionStruct(retVal);
        }
    }

    public void AssertInteger(int i)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("OptionOpaque");
            }
            Raw.OptionOpaque.AssertInteger(_inner, i);
        }
    }

    public static bool OptionOpaqueArgument(OptionOpaque? arg)
    {
        unsafe
        {
            Raw.OptionOpaque* argRaw;
            if (arg == null)
            {
                argRaw = null;
            }
            else
            {
                argRaw = arg.AsFFI();
                if (argRaw == null)
                {
                    throw new ObjectDisposedException("OptionOpaque");
                }
            }
            bool retVal = Raw.OptionOpaque.OptionOpaqueArgument(argRaw);
            return retVal;
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.OptionOpaque* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.OptionOpaque.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~OptionOpaque()
    {
        Dispose();
    }
}
