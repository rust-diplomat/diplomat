// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using DiplomatFeatures.Diplomat;
#pragma warning restore 0105

namespace DiplomatFeatures;

#nullable enable

public partial class ResultOpaque: IDisposable
{
    private unsafe Raw.ResultOpaque* _inner;

    /// <summary>
    /// Creates a managed <c>ResultOpaque</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe ResultOpaque(Raw.ResultOpaque* handle)
    {
        _inner = handle;
    }

    /// <exception cref="ErrorEnumException"></exception>
    /// <returns>
    /// A <c>ResultOpaque</c> allocated on Rust side.
    /// </returns>
    public static ResultOpaque New(int i)
    {
        unsafe
        {
            Raw.ResultFfiResultBoxResultOpaqueErrorEnum result = Raw.ResultOpaque.New(i);
            if (!result.isOk)
            {
                throw new ErrorEnumException((ErrorEnum)result.Err);
            }
            Raw.ResultOpaque* retVal = result.Ok;
            return new ResultOpaque(retVal);
        }
    }

    /// <exception cref="ErrorEnumException"></exception>
    /// <returns>
    /// A <c>ResultOpaque</c> allocated on Rust side.
    /// </returns>
    public static ResultOpaque NewFailingFoo()
    {
        unsafe
        {
            Raw.ResultFfiResultBoxResultOpaqueErrorEnum result = Raw.ResultOpaque.NewFailingFoo();
            if (!result.isOk)
            {
                throw new ErrorEnumException((ErrorEnum)result.Err);
            }
            Raw.ResultOpaque* retVal = result.Ok;
            return new ResultOpaque(retVal);
        }
    }

    /// <exception cref="ErrorEnumException"></exception>
    /// <returns>
    /// A <c>ResultOpaque</c> allocated on Rust side.
    /// </returns>
    public static ResultOpaque NewFailingBar()
    {
        unsafe
        {
            Raw.ResultFfiResultBoxResultOpaqueErrorEnum result = Raw.ResultOpaque.NewFailingBar();
            if (!result.isOk)
            {
                throw new ErrorEnumException((ErrorEnum)result.Err);
            }
            Raw.ResultOpaque* retVal = result.Ok;
            return new ResultOpaque(retVal);
        }
    }

    /// <exception cref="DiplomatOpaqueException"></exception>
    /// <returns>
    /// A <c>ResultOpaque</c> allocated on Rust side.
    /// </returns>
    public static ResultOpaque NewFailingUnit()
    {
        unsafe
        {
            Raw.ResultFfiResultBoxResultOpaqueVoid result = Raw.ResultOpaque.NewFailingUnit();
            if (!result.isOk)
            {
                throw new DiplomatOpaqueException();
            }
            Raw.ResultOpaque* retVal = result.Ok;
            return new ResultOpaque(retVal);
        }
    }

    /// <exception cref="ErrorStructException"></exception>
    /// <returns>
    /// A <c>ResultOpaque</c> allocated on Rust side.
    /// </returns>
    public static ResultOpaque NewFailingStruct(int i)
    {
        unsafe
        {
            Raw.ResultFfiResultBoxResultOpaqueErrorStruct result = Raw.ResultOpaque.NewFailingStruct(i);
            if (!result.isOk)
            {
                throw new ErrorStructException(new ErrorStruct(result.Err));
            }
            Raw.ResultOpaque* retVal = result.Ok;
            return new ResultOpaque(retVal);
        }
    }

    /// <exception cref="ResultOpaqueException"></exception>
    public static void NewInErr(int i)
    {
        unsafe
        {
            Raw.ResultFfiResultVoidBoxResultOpaque result = Raw.ResultOpaque.NewInErr(i);
            if (!result.isOk)
            {
                throw new ResultOpaqueException(new ResultOpaque(result.Err));
            }
        }
    }

    /// <exception cref="DiplomatOpaqueException"></exception>
    public static int NewInt(int i)
    {
        unsafe
        {
            Raw.ResultFfiResultI32Void result = Raw.ResultOpaque.NewInt(i);
            if (!result.isOk)
            {
                throw new DiplomatOpaqueException();
            }
            int retVal = result.Ok;
            return retVal;
        }
    }

    /// <exception cref="ResultOpaqueException"></exception>
    /// <returns>
    /// A <c>ErrorEnum</c> allocated on C# side.
    /// </returns>
    public static ErrorEnum NewInEnumErr(int i)
    {
        unsafe
        {
            Raw.ResultFfiResultErrorEnumBoxResultOpaque result = Raw.ResultOpaque.NewInEnumErr(i);
            if (!result.isOk)
            {
                throw new ResultOpaqueException(new ResultOpaque(result.Err));
            }
            Raw.ErrorEnum retVal = result.Ok;
            return (ErrorEnum)retVal;
        }
    }

    public void AssertInteger(int i)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("ResultOpaque");
            }
            Raw.ResultOpaque.AssertInteger(_inner, i);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.ResultOpaque* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.ResultOpaque.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~ResultOpaque()
    {
        Dispose();
    }
}
