// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using DiplomatFeatures.Diplomat;
#pragma warning restore 0105

namespace DiplomatFeatures;

#nullable enable

public partial class Unnamespaced: IDisposable
{
    private unsafe Raw.Unnamespaced* _inner;

    /// <summary>
    /// Creates a managed <c>Unnamespaced</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe Unnamespaced(Raw.Unnamespaced* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>Unnamespaced</c> allocated on Rust side.
    /// </returns>
    public static Unnamespaced Make(AttrEnum e)
    {
        unsafe
        {
            Raw.AttrEnum eRaw;
            eRaw = (Raw.AttrEnum)e;
            Raw.Unnamespaced* retVal = Raw.Unnamespaced.Make(eRaw);
            return new Unnamespaced(retVal);
        }
    }

    public void UseNamespaced(AttrOpaque1 n)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Unnamespaced");
            }
            Raw.AttrOpaque1* nRaw;
            nRaw = n.AsFFI();
            if (nRaw == null)
            {
                throw new ObjectDisposedException("AttrOpaque1");
            }
            Raw.Unnamespaced.UseNamespaced(_inner, nRaw);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.Unnamespaced* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.Unnamespaced.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~Unnamespaced()
    {
        Dispose();
    }
}
