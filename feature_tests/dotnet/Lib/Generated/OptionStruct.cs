// Automatically generated by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using DiplomatFeatures.Diplomat;
#pragma warning restore 0105

namespace DiplomatFeatures;

#nullable enable

public partial class OptionStruct: IDisposable
{
    private unsafe Raw.OptionStruct* _inner;
    private readonly bool _isAllocatedByRust;

    public uint C
    {
        get
        {
            unsafe
            {
                return _inner->c;
            }
        }
        set
        {
            unsafe
            {
                _inner->c = value;
            }
        }
    }

    /// <summary>
    /// Creates a managed <c>OptionStruct</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// </remarks>
    /// <remarks>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe OptionStruct(Raw.OptionStruct* handle)
    {
        _inner = handle;
        _isAllocatedByRust = true;
    }

    /// <summary>
    /// Creates a managed <c>OptionStruct</c> from the raw struct.
    /// </summary>
    /// <remarks>
    /// This constructor allocates the raw struct on C# side.
    /// If a custom Drop implementation is implemented on Rust side, it will NOT run on destruction.
    /// </remarks>
    public OptionStruct(Raw.OptionStruct handle)
    {
        unsafe
        {
            _inner = (Raw.OptionStruct*)Marshal.AllocHGlobal(sizeof(Raw.OptionStruct));
            Buffer.MemoryCopy(&handle, _inner, sizeof(Raw.OptionStruct), sizeof(Raw.OptionStruct));
            _isAllocatedByRust = false;
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.OptionStruct* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            if (_isAllocatedByRust)
            {
                Raw.OptionStruct.Destroy(_inner);
            }
            else
            {
                Marshal.FreeHGlobal((IntPtr)_inner);
            }

            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~OptionStruct()
    {
        Dispose();
    }
}
