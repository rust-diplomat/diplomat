// Automatically generated by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using DiplomatFeatures.Diplomat;
#pragma warning restore 0105

namespace DiplomatFeatures;

#nullable enable

public partial class One: IDisposable
{
    private unsafe Raw.One* _inner;

    /// <summary>
    /// Creates a managed <c>One</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// </remarks>
    /// <remarks>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe One(Raw.One* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>One</c> allocated on Rust side.
    /// </returns>
    public static One Transitivity(One hold, One nohold)
    {
        unsafe
        {
            Raw.One* holdRaw;
            holdRaw = hold.AsFFI();
            if (holdRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* noholdRaw;
            noholdRaw = nohold.AsFFI();
            if (noholdRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* retVal = Raw.One.Transitivity(holdRaw, noholdRaw);
            return new One(retVal);
        }
    }

    /// <returns>
    /// A <c>One</c> allocated on Rust side.
    /// </returns>
    public static One Cycle(Two hold, One nohold)
    {
        unsafe
        {
            Raw.Two* holdRaw;
            holdRaw = hold.AsFFI();
            if (holdRaw == null)
            {
                throw new ObjectDisposedException("Two");
            }
            Raw.One* noholdRaw;
            noholdRaw = nohold.AsFFI();
            if (noholdRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* retVal = Raw.One.Cycle(holdRaw, noholdRaw);
            return new One(retVal);
        }
    }

    /// <returns>
    /// A <c>One</c> allocated on Rust side.
    /// </returns>
    public static One ManyDependents(One a, One b, Two c, Two d, Two nohold)
    {
        unsafe
        {
            Raw.One* aRaw;
            aRaw = a.AsFFI();
            if (aRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* bRaw;
            bRaw = b.AsFFI();
            if (bRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.Two* cRaw;
            cRaw = c.AsFFI();
            if (cRaw == null)
            {
                throw new ObjectDisposedException("Two");
            }
            Raw.Two* dRaw;
            dRaw = d.AsFFI();
            if (dRaw == null)
            {
                throw new ObjectDisposedException("Two");
            }
            Raw.Two* noholdRaw;
            noholdRaw = nohold.AsFFI();
            if (noholdRaw == null)
            {
                throw new ObjectDisposedException("Two");
            }
            Raw.One* retVal = Raw.One.ManyDependents(aRaw, bRaw, cRaw, dRaw, noholdRaw);
            return new One(retVal);
        }
    }

    /// <returns>
    /// A <c>One</c> allocated on Rust side.
    /// </returns>
    public static One ReturnOutlivesParam(Two hold, One nohold)
    {
        unsafe
        {
            Raw.Two* holdRaw;
            holdRaw = hold.AsFFI();
            if (holdRaw == null)
            {
                throw new ObjectDisposedException("Two");
            }
            Raw.One* noholdRaw;
            noholdRaw = nohold.AsFFI();
            if (noholdRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* retVal = Raw.One.ReturnOutlivesParam(holdRaw, noholdRaw);
            return new One(retVal);
        }
    }

    /// <returns>
    /// A <c>One</c> allocated on Rust side.
    /// </returns>
    public static One DiamondTop(One top, One left, One right, One bottom)
    {
        unsafe
        {
            Raw.One* topRaw;
            topRaw = top.AsFFI();
            if (topRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* leftRaw;
            leftRaw = left.AsFFI();
            if (leftRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* rightRaw;
            rightRaw = right.AsFFI();
            if (rightRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* bottomRaw;
            bottomRaw = bottom.AsFFI();
            if (bottomRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* retVal = Raw.One.DiamondTop(topRaw, leftRaw, rightRaw, bottomRaw);
            return new One(retVal);
        }
    }

    /// <returns>
    /// A <c>One</c> allocated on Rust side.
    /// </returns>
    public static One DiamondLeft(One top, One left, One right, One bottom)
    {
        unsafe
        {
            Raw.One* topRaw;
            topRaw = top.AsFFI();
            if (topRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* leftRaw;
            leftRaw = left.AsFFI();
            if (leftRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* rightRaw;
            rightRaw = right.AsFFI();
            if (rightRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* bottomRaw;
            bottomRaw = bottom.AsFFI();
            if (bottomRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* retVal = Raw.One.DiamondLeft(topRaw, leftRaw, rightRaw, bottomRaw);
            return new One(retVal);
        }
    }

    /// <returns>
    /// A <c>One</c> allocated on Rust side.
    /// </returns>
    public static One DiamondRight(One top, One left, One right, One bottom)
    {
        unsafe
        {
            Raw.One* topRaw;
            topRaw = top.AsFFI();
            if (topRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* leftRaw;
            leftRaw = left.AsFFI();
            if (leftRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* rightRaw;
            rightRaw = right.AsFFI();
            if (rightRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* bottomRaw;
            bottomRaw = bottom.AsFFI();
            if (bottomRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* retVal = Raw.One.DiamondRight(topRaw, leftRaw, rightRaw, bottomRaw);
            return new One(retVal);
        }
    }

    /// <returns>
    /// A <c>One</c> allocated on Rust side.
    /// </returns>
    public static One DiamondBottom(One top, One left, One right, One bottom)
    {
        unsafe
        {
            Raw.One* topRaw;
            topRaw = top.AsFFI();
            if (topRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* leftRaw;
            leftRaw = left.AsFFI();
            if (leftRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* rightRaw;
            rightRaw = right.AsFFI();
            if (rightRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* bottomRaw;
            bottomRaw = bottom.AsFFI();
            if (bottomRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* retVal = Raw.One.DiamondBottom(topRaw, leftRaw, rightRaw, bottomRaw);
            return new One(retVal);
        }
    }

    /// <returns>
    /// A <c>One</c> allocated on Rust side.
    /// </returns>
    public static One DiamondAndNestedTypes(One a, One b, One c, One d, One nohold)
    {
        unsafe
        {
            Raw.One* aRaw;
            aRaw = a.AsFFI();
            if (aRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* bRaw;
            bRaw = b.AsFFI();
            if (bRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* cRaw;
            cRaw = c.AsFFI();
            if (cRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* dRaw;
            dRaw = d.AsFFI();
            if (dRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* noholdRaw;
            noholdRaw = nohold.AsFFI();
            if (noholdRaw == null)
            {
                throw new ObjectDisposedException("One");
            }
            Raw.One* retVal = Raw.One.DiamondAndNestedTypes(aRaw, bRaw, cRaw, dRaw, noholdRaw);
            return new One(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.One* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.One.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~One()
    {
        Dispose();
    }
}
