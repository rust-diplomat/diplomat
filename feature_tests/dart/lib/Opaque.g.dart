// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

final class Opaque implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  Opaque._(this._underlying) {
    _finalizer.attach(this, _underlying.cast());
  }

  static final _finalizer = ffi.NativeFinalizer(_capi('Opaque_destroy'));

  factory Opaque() {
    final result = _Opaque_new();
    return Opaque._(result);
  }

  // ignore: non_constant_identifier_names
  static final _Opaque_new =
    _capi<ffi.NativeFunction<ffi.Pointer<ffi.Opaque> Function()>>('Opaque_new')
      .asFunction<ffi.Pointer<ffi.Opaque> Function()>(isLeaf: true);

  /// See the [Rust documentation for `something`](https://docs.rs/Something/latest/struct.Something.html#method.something) for more information.
  ///
  /// See the [Rust documentation for `something_else`](https://docs.rs/Something/latest/struct.Something.html#method.something_else) for more information.
  ///
  /// Additional information: [1](https://docs.rs/Something/latest/struct.Something.html#method.something_small), [2](https://docs.rs/SomethingElse/latest/struct.SomethingElse.html#method.something)
  void assertStruct(MyStruct s) {
    _Opaque_assert_struct(_underlying, s._underlying);
  }

  // ignore: non_constant_identifier_names
  static final _Opaque_assert_struct =
    _capi<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Opaque>, _MyStructFfi)>>('Opaque_assert_struct')
      .asFunction<void Function(ffi.Pointer<ffi.Opaque>, _MyStructFfi)>(isLeaf: true);

  static final int returnsUsize = () {
    final result = _Opaque_returns_usize();
    return result;
  }();

  // ignore: non_constant_identifier_names
  static final _Opaque_returns_usize =
    _capi<ffi.NativeFunction<ffi.Size Function()>>('Opaque_returns_usize')
      .asFunction<int Function()>(isLeaf: true);

  static final ImportedStruct returnsImported = () {
    final result = _Opaque_returns_imported();
    return ImportedStruct._(result);
  }();

  // ignore: non_constant_identifier_names
  static final _Opaque_returns_imported =
    _capi<ffi.NativeFunction<_ImportedStructFfi Function()>>('Opaque_returns_imported')
      .asFunction<_ImportedStructFfi Function()>(isLeaf: true);
}
