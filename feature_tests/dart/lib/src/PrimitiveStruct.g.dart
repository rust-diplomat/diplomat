// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

final class _PrimitiveStructFfi extends ffi.Struct {
  @ffi.Float()
  external double x;
  @ffi.Bool()
  external bool a;
  @ffi.Uint32()
  external Rune b;
  @ffi.Int64()
  external int c;
  @ffi.IntPtr()
  external int d;
  @ffi.Uint8()
  external int e;
}

final class PrimitiveStruct {
  double x;
  bool a;
  Rune b;
  int c;
  int d;
  int e;

  PrimitiveStruct({required this.x, required this.a, required this.b, required this.c, required this.d, required this.e});

  // This struct contains borrowed fields, so this takes in a list of
  // "edges" corresponding to where each lifetime's data may have been borrowed from
  // and passes it down to individual fields containing the borrow.
  // This method does not attempt to handle any dependencies between lifetimes, the caller
  // should handle this when constructing edge arrays.
  // ignore: unused_element
  PrimitiveStruct._fromFfi(_PrimitiveStructFfi ffi) :
    x = ffi.x,
    a = ffi.a,
    b = ffi.b,
    c = ffi.c,
    d = ffi.d,
    e = ffi.e;

  // ignore: unused_element
  _PrimitiveStructFfi _toFfi(ffi.Allocator temp) {
    final struct = ffi.Struct.create<_PrimitiveStructFfi>();
    struct.x = x;
    struct.a = a;
    struct.b = b;
    struct.c = c;
    struct.d = d;
    struct.e = e;
    return struct;
  }


  @override
  bool operator ==(Object other) =>
      other is PrimitiveStruct &&
      other.x == x &&
      other.a == a &&
      other.b == b &&
      other.c == c &&
      other.d == d &&
      other.e == e;

  @override
  int get hashCode => Object.hashAll([
        x,
        a,
        b,
        c,
        d,
        e,
      ]);
}

// dart format on
