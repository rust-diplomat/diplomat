// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

final class ResultOpaque implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  ResultOpaque._(this._underlying) {
    _finalizer.attach(this, _underlying.cast());
  }

  static final _finalizer = ffi.NativeFinalizer(_capi('ResultOpaque_destroy'));

  /// 
  ///
  /// Throws [ErrorEnum] on failure.
  factory ResultOpaque(int i) {
    final result = _ResultOpaque_new(i);
    if (!result.isOk) {
      throw ErrorEnum.values[result.union.err];
    }
    return ResultOpaque._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ResultOpaque_new =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function(ffi.Int32)>>('ResultOpaque_new')
      .asFunction<_ResultOpaqueInt32 Function(int)>(isLeaf: true);

  /// 
  ///
  /// Throws [ErrorEnum] on failure.
  factory ResultOpaque.failingFoo() {
    final result = _ResultOpaque_new_failing_foo();
    if (!result.isOk) {
      throw ErrorEnum.values[result.union.err];
    }
    return ResultOpaque._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ResultOpaque_new_failing_foo =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function()>>('ResultOpaque_new_failing_foo')
      .asFunction<_ResultOpaqueInt32 Function()>(isLeaf: true);

  /// 
  ///
  /// Throws [ErrorEnum] on failure.
  factory ResultOpaque.failingBar() {
    final result = _ResultOpaque_new_failing_bar();
    if (!result.isOk) {
      throw ErrorEnum.values[result.union.err];
    }
    return ResultOpaque._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ResultOpaque_new_failing_bar =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function()>>('ResultOpaque_new_failing_bar')
      .asFunction<_ResultOpaqueInt32 Function()>(isLeaf: true);

  /// 
  ///
  /// Throws [VoidError] on failure.
  factory ResultOpaque.failingUnit() {
    final result = _ResultOpaque_new_failing_unit();
    if (!result.isOk) {
      throw VoidError();
    }
    return ResultOpaque._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ResultOpaque_new_failing_unit =
    _capi<ffi.NativeFunction<_ResultOpaqueVoid Function()>>('ResultOpaque_new_failing_unit')
      .asFunction<_ResultOpaqueVoid Function()>(isLeaf: true);

  /// 
  ///
  /// Throws [ErrorStruct] on failure.
  factory ResultOpaque.failingStruct(int i) {
    final result = _ResultOpaque_new_failing_struct(i);
    if (!result.isOk) {
      throw ErrorStruct._(result.union.err);
    }
    return ResultOpaque._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ResultOpaque_new_failing_struct =
    _capi<ffi.NativeFunction<_ResultOpaqueErrorStructFfi Function(ffi.Int32)>>('ResultOpaque_new_failing_struct')
      .asFunction<_ResultOpaqueErrorStructFfi Function(int)>(isLeaf: true);

  /// 
  ///
  /// Throws [ResultOpaque] on failure.
  static void newInErr(int i) {
    final result = _ResultOpaque_new_in_err(i);
    if (!result.isOk) {
      throw ResultOpaque._(result.union.err);
    }
  }

  // ignore: non_constant_identifier_names
  static final _ResultOpaque_new_in_err =
    _capi<ffi.NativeFunction<_ResultVoidOpaque Function(ffi.Int32)>>('ResultOpaque_new_in_err')
      .asFunction<_ResultVoidOpaque Function(int)>(isLeaf: true);

  /// 
  ///
  /// Throws [VoidError] on failure.
  static int newInt(int i) {
    final result = _ResultOpaque_new_int(i);
    if (!result.isOk) {
      throw VoidError();
    }
    return result.union.ok;
  }

  // ignore: non_constant_identifier_names
  static final _ResultOpaque_new_int =
    _capi<ffi.NativeFunction<_ResultInt32Void Function(ffi.Int32)>>('ResultOpaque_new_int')
      .asFunction<_ResultInt32Void Function(int)>(isLeaf: true);

  /// 
  ///
  /// Throws [ResultOpaque] on failure.
  static ErrorEnum newInEnumErr(int i) {
    final result = _ResultOpaque_new_in_enum_err(i);
    if (!result.isOk) {
      throw ResultOpaque._(result.union.err);
    }
    return ErrorEnum.values[result.union.ok];
  }

  // ignore: non_constant_identifier_names
  static final _ResultOpaque_new_in_enum_err =
    _capi<ffi.NativeFunction<_ResultInt32Opaque Function(ffi.Int32)>>('ResultOpaque_new_in_enum_err')
      .asFunction<_ResultInt32Opaque Function(int)>(isLeaf: true);

  void assertInteger(int i) {
    _ResultOpaque_assert_integer(_underlying, i);
  }

  // ignore: non_constant_identifier_names
  static final _ResultOpaque_assert_integer =
    _capi<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Opaque>, ffi.Int32)>>('ResultOpaque_assert_integer')
      .asFunction<void Function(ffi.Pointer<ffi.Opaque>, int)>(isLeaf: true);
}
