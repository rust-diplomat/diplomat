// generated by diplomat-tool

part of 'lib.g.dart';

final class AttrOpaque1Renamed implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  AttrOpaque1Renamed._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_namespace_AttrOpaque1_destroy));

  factory AttrOpaque1Renamed() {
    final result = _namespace_AttrOpaque1_new();
    return AttrOpaque1Renamed._fromFfi(result, []);
  }

  int get methodRenamed {
    final result = _namespace_AttrOpaque1_method(_ffi);
    return result;
  }

  int get abirenamed {
    final result = _renamed_on_abi_only(_ffi);
    return result;
  }

  void useUnnamespaced(Unnamespaced un) {
    _namespace_AttrOpaque1_use_unnamespaced(_ffi, un._ffi);
  }

  void useNamespaced(RenamedAttrEnum n) {
    _namespace_AttrOpaque1_use_namespaced(_ffi, n.index);
  }
}

@_DiplomatFfiUse('namespace_AttrOpaque1_destroy')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'namespace_AttrOpaque1_destroy')
// ignore: non_constant_identifier_names
external void _namespace_AttrOpaque1_destroy(ffi.Pointer<ffi.Void> self);

@_DiplomatFfiUse('namespace_AttrOpaque1_new')
@ffi.Native<ffi.Pointer<ffi.Opaque> Function()>(isLeaf: true, symbol: 'namespace_AttrOpaque1_new')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _namespace_AttrOpaque1_new();

@_DiplomatFfiUse('namespace_AttrOpaque1_method')
@ffi.Native<ffi.Uint8 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'namespace_AttrOpaque1_method')
// ignore: non_constant_identifier_names
external int _namespace_AttrOpaque1_method(ffi.Pointer<ffi.Opaque> self);

@_DiplomatFfiUse('renamed_on_abi_only')
@ffi.Native<ffi.Uint8 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'renamed_on_abi_only')
// ignore: non_constant_identifier_names
external int _renamed_on_abi_only(ffi.Pointer<ffi.Opaque> self);

@_DiplomatFfiUse('namespace_AttrOpaque1_use_unnamespaced')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'namespace_AttrOpaque1_use_unnamespaced')
// ignore: non_constant_identifier_names
external void _namespace_AttrOpaque1_use_unnamespaced(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Opaque> un);

@_DiplomatFfiUse('namespace_AttrOpaque1_use_namespaced')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, ffi.Int32)>(isLeaf: true, symbol: 'namespace_AttrOpaque1_use_namespaced')
// ignore: non_constant_identifier_names
external void _namespace_AttrOpaque1_use_namespaced(ffi.Pointer<ffi.Opaque> self, int n);
