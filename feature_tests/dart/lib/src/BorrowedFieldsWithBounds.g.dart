// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

final class _BorrowedFieldsWithBoundsFfi extends ffi.Struct {
  external _SliceUtf16 fieldA;
  external _SliceUtf8 fieldB;
  external _SliceUtf8 fieldC;
}

final class BorrowedFieldsWithBounds {
  String fieldA;
  String fieldB;
  String fieldC;
  // ignore: unused element
  final core.List<Object> _edgeA;
  // ignore: unused element
  final core.List<Object> _edgeB;
  // ignore: unused element
  final core.List<Object> _edgeC;

  BorrowedFieldsWithBounds({required this.fieldA, required this.fieldB, required this.fieldC}) : _edgeA = [], _edgeB = [], _edgeC = [];

  // ignore: unused_element
  // Internal constructor from FFI.
  // This struct contains borrowed fields, so this takes in a list of
  // "edges" corresponding to where each lifetime's data may have been borrowed from
  // and passes it down to individual fields containing the borrow.
  // This method does not attempt to handle any dependencies between lifetimes, the caller
  // should handle this when constructing edge arrays.
  BorrowedFieldsWithBounds._(_BorrowedFieldsWithBoundsFfi underlying, {required core.List<Object> edgeA, required core.List<Object> edgeB, required core.List<Object> edgeC}) :
    _edgeA = edgeA,
    _edgeB = edgeB,
    _edgeC = edgeC,
    fieldA = core.String.fromCharCodes(underlying.fieldA._pointer.asTypedList(underlying.fieldA._length)),
    fieldB = Utf8Decoder().convert(underlying.fieldB._pointer.asTypedList(underlying.fieldB._length)),
    fieldC = Utf8Decoder().convert(underlying.fieldC._pointer.asTypedList(underlying.fieldC._length));

  // ignore: unused_element
  _BorrowedFieldsWithBoundsFfi _pointer(ffi.Allocator temp) {
    final pointer = temp<_BorrowedFieldsWithBoundsFfi>();
    final fieldAView = fieldA.utf16View;
    pointer.ref.fieldA._pointer = fieldAView.pointer(temp);
    pointer.ref.fieldA._length = fieldAView.length;
    final fieldBView = fieldB.utf8View;
    pointer.ref.fieldB._pointer = fieldBView.pointer(temp);
    pointer.ref.fieldB._length = fieldBView.length;
    final fieldCView = fieldC.utf8View;
    pointer.ref.fieldC._pointer = fieldCView.pointer(temp);
    pointer.ref.fieldC._length = fieldCView.length;
    return pointer.ref;
  }

  @override
  bool operator ==(Object other) =>
      other is BorrowedFieldsWithBounds &&
      other.fieldA == this.fieldA &&
      other.fieldB == this.fieldB &&
      other.fieldC == this.fieldC;

  @override
  int get hashCode => Object.hashAll([
        this.fieldA,
        this.fieldB,
        this.fieldC,
      ]);
}
