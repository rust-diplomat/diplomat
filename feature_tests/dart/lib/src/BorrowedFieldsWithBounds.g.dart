// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

final class _BorrowedFieldsWithBoundsFfi extends ffi.Struct {
  external _SliceUtf16 fieldA;
  external _SliceUtf8 fieldB;
  external _SliceUtf8 fieldC;
}

final class BorrowedFieldsWithBounds {
  String fieldA;
  String fieldB;
  String fieldC;

  BorrowedFieldsWithBounds({required this.fieldA, required this.fieldB, required this.fieldC});

  // ignore: unused_element
  // Internal constructor from FFI.
  BorrowedFieldsWithBounds._(_BorrowedFieldsWithBoundsFfi underlying, core.List<Object> edge_a, core.List<Object> edge_b, core.List<Object> edge_c) :
    fieldA = core.String.fromCharCodes(underlying.fieldA._pointer.asTypedList(underlying.fieldA._length)),
    fieldB = Utf8Decoder().convert(underlying.fieldB._pointer.asTypedList(underlying.fieldB._length)),
    fieldC = Utf8Decoder().convert(underlying.fieldC._pointer.asTypedList(underlying.fieldC._length));

  // ignore: unused_element
  _BorrowedFieldsWithBoundsFfi _pointer(ffi.Allocator temp) {
    final pointer = temp<_BorrowedFieldsWithBoundsFfi>();
    final fieldAView = fieldA.utf16View;
    pointer.ref.fieldA._pointer = fieldAView.pointer(temp);
    pointer.ref.fieldA._length = fieldAView.length;
    final fieldBView = fieldB.utf8View;
    pointer.ref.fieldB._pointer = fieldBView.pointer(temp);
    pointer.ref.fieldB._length = fieldBView.length;
    final fieldCView = fieldC.utf8View;
    pointer.ref.fieldC._pointer = fieldCView.pointer(temp);
    pointer.ref.fieldC._length = fieldCView.length;
    return pointer.ref;
  }

  @override
  bool operator ==(Object other) =>
      other is BorrowedFieldsWithBounds &&
      other.fieldA == this.fieldA &&
      other.fieldB == this.fieldB &&
      other.fieldC == this.fieldC;

  @override
  int get hashCode => Object.hashAll([
        this.fieldA,
        this.fieldB,
        this.fieldC,
      ]);

  // ignore: unused element
  // Append all fields corresponding to lifetime `'a`
  // and lifetimes longer than it (Lifetimes: a, b, c)
  // This is all fields that may be borrowed from if borrowing `'a`
  core.List<Object> _fields_for_lifetime_a() {
    return [fieldA, fieldB, fieldC];
  }

  // ignore: unused element
  // Append all fields corresponding to lifetime `'b`
  // and lifetimes longer than it (Lifetimes: b, c)
  // This is all fields that may be borrowed from if borrowing `'b`
  core.List<Object> _fields_for_lifetime_b() {
    return [fieldB, fieldC];
  }

  // ignore: unused element
  // Append all fields corresponding to lifetime `'c`
  core.List<Object> _fields_for_lifetime_c() {
    return [fieldC];
  }
}
