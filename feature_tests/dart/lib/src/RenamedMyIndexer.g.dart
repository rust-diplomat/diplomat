// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

final class RenamedMyIndexer implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  RenamedMyIndexer._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_namespace_MyIndexer_destroy));

  String? operator [](int i) {
    // This lifetime edge depends on lifetimes: 'a
    core.List<Object> aEdges = [this];
    final result = _namespace_MyIndexer_get(_ffi, i);
    if (!result.isOk) {
      return null;
    }
    return result.union.ok._toDart(aEdges);
  }
}

@_DiplomatFfiUse('namespace_MyIndexer_destroy')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'namespace_MyIndexer_destroy')
// ignore: non_constant_identifier_names
external void _namespace_MyIndexer_destroy(ffi.Pointer<ffi.Void> self);

@_DiplomatFfiUse('namespace_MyIndexer_get')
@ffi.Native<_ResultSliceUtf8Void Function(ffi.Pointer<ffi.Opaque>, ffi.Size)>(isLeaf: true, symbol: 'namespace_MyIndexer_get')
// ignore: non_constant_identifier_names
external _ResultSliceUtf8Void _namespace_MyIndexer_get(ffi.Pointer<ffi.Opaque> self, int i);

// dart format on
