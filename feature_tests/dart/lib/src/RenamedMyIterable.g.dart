// generated by diplomat-tool

part of 'lib.g.dart';

final class RenamedMyIterable with core.Iterable<int> implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  RenamedMyIterable._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_namespace_MyIterable_destroy));

  factory RenamedMyIterable(core.List<int> x) {
    final temp = _FinalizedArena();
    final result = _namespace_MyIterable_new(x._uint8AllocIn(temp.arena));
    return RenamedMyIterable._fromFfi(result, []);
  }

  RenamedMyIterator get iterator {
    // This lifetime edge depends on lifetimes: 'a
    core.List<Object> aEdges = [this];
    final result = _namespace_MyIterable_iter(_ffi);
    return RenamedMyIterator._fromFfi(result, [], aEdges);
  }
}

@meta.ResourceIdentifier('namespace_MyIterable_destroy')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'namespace_MyIterable_destroy')
// ignore: non_constant_identifier_names
external void _namespace_MyIterable_destroy(ffi.Pointer<ffi.Void> self);

@meta.ResourceIdentifier('namespace_MyIterable_new')
@ffi.Native<ffi.Pointer<ffi.Opaque> Function(_SliceUint8)>(isLeaf: true, symbol: 'namespace_MyIterable_new')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _namespace_MyIterable_new(_SliceUint8 x);

@meta.ResourceIdentifier('namespace_MyIterable_iter')
@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'namespace_MyIterable_iter')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _namespace_MyIterable_iter(ffi.Pointer<ffi.Opaque> self);
