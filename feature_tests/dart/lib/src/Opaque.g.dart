// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

final class Opaque implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  Opaque._(this._underlying) {
    _finalizer.attach(this, _underlying.cast());
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_Opaque_destroy));

  factory Opaque() {
    final result = _Opaque_new();
    return Opaque._(result);
  }

  /// See the [Rust documentation for `something`](https://docs.rs/Something/latest/struct.Something.html#method.something) for more information.
  ///
  /// See the [Rust documentation for `something_else`](https://docs.rs/Something/latest/struct.Something.html#method.something_else) for more information.
  ///
  /// Additional information: [1](https://docs.rs/Something/latest/struct.Something.html#method.something_small), [2](https://docs.rs/SomethingElse/latest/struct.SomethingElse.html#method.something)
  void assertStruct(MyStruct s) {
    _Opaque_assert_struct(_underlying, s._underlying);
  }

  static final int returnsUsize = () {
    final result = _Opaque_returns_usize();
    return result;
  }();

  static final ImportedStruct returnsImported = () {
    final result = _Opaque_returns_imported();
    return ImportedStruct._(result);
  }();
}

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'Opaque_destroy')
// ignore: non_constant_identifier_names
external void _Opaque_destroy(ffi.Pointer<ffi.Void> self);

@ffi.Native<ffi.Pointer<ffi.Opaque> Function()>(isLeaf: true, symbol: 'Opaque_new')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _Opaque_new();

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, _MyStructFfi)>(isLeaf: true, symbol: 'Opaque_assert_struct')
// ignore: non_constant_identifier_names
external void _Opaque_assert_struct(ffi.Pointer<ffi.Opaque> self, _MyStructFfi s);

@ffi.Native<ffi.Size Function()>(isLeaf: true, symbol: 'Opaque_returns_usize')
// ignore: non_constant_identifier_names
external int _Opaque_returns_usize();

@ffi.Native<_ImportedStructFfi Function()>(isLeaf: true, symbol: 'Opaque_returns_imported')
// ignore: non_constant_identifier_names
external _ImportedStructFfi _Opaque_returns_imported();
