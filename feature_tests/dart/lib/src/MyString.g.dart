// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

final class MyString implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  MyString._(this._underlying) {
    _finalizer.attach(this, _underlying.cast());
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_MyString_destroy));

  factory MyString(String v) {
    final temp = ffi2.Arena();
    final vView = v.utf8View;
    final result = _MyString_new(vView.pointer(temp), vView.length);
    temp.releaseAll();
    return MyString._(result);
  }

  factory MyString.unsafe(String v) {
    final temp = ffi2.Arena();
    final vView = v.utf8View;
    final result = _MyString_new_unsafe(vView.pointer(temp), vView.length);
    temp.releaseAll();
    return MyString._(result);
  }

  void setStr(String newStr) {
    final temp = ffi2.Arena();
    final newStrView = newStr.utf8View;
    _MyString_set_str(_underlying, newStrView.pointer(temp), newStrView.length);
    temp.releaseAll();
  }

  String get getStr {
    final writeable = _Writeable();
    _MyString_get_str(_underlying, writeable._underlying);
    return writeable.finalize();
  }
}

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'MyString_destroy')
// ignore: non_constant_identifier_names
external void _MyString_destroy(ffi.Pointer<ffi.Void> self);

@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Uint8>, ffi.Size)>(isLeaf: true, symbol: 'MyString_new')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _MyString_new(ffi.Pointer<ffi.Uint8> vData, int vLength);

@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Uint8>, ffi.Size)>(isLeaf: true, symbol: 'MyString_new_unsafe')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _MyString_new_unsafe(ffi.Pointer<ffi.Uint8> vData, int vLength);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, ffi.Size)>(isLeaf: true, symbol: 'MyString_set_str')
// ignore: non_constant_identifier_names
external void _MyString_set_str(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Uint8> newStrData, int newStrLength);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'MyString_get_str')
// ignore: non_constant_identifier_names
external void _MyString_get_str(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Opaque> writeable);
