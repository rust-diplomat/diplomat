// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

final class MyString implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  MyString._(this._underlying) {
    _finalizer.attach(this, _underlying.cast());
  }

  static final _finalizer = ffi.NativeFinalizer(_capi('MyString_destroy'));

  factory MyString(String v) {
    final temp = ffi2.Arena();
    final vView = v.utf8View;
    final result = _MyString_new(vView.pointer(temp), vView.length);
    temp.releaseAll();
    return MyString._(result);
  }

  // ignore: non_constant_identifier_names
  static final _MyString_new =
    _capi<ffi.NativeFunction<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Uint8>, ffi.Size)>>('MyString_new')
      .asFunction<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Uint8>, int)>(isLeaf: true);

  factory MyString.unsafe(String v) {
    final temp = ffi2.Arena();
    final vView = v.utf8View;
    final result = _MyString_new_unsafe(vView.pointer(temp), vView.length);
    temp.releaseAll();
    return MyString._(result);
  }

  // ignore: non_constant_identifier_names
  static final _MyString_new_unsafe =
    _capi<ffi.NativeFunction<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Uint8>, ffi.Size)>>('MyString_new_unsafe')
      .asFunction<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Uint8>, int)>(isLeaf: true);

  void setStr(String newStr) {
    final temp = ffi2.Arena();
    final newStrView = newStr.utf8View;
    _MyString_set_str(_underlying, newStrView.pointer(temp), newStrView.length);
    temp.releaseAll();
  }

  // ignore: non_constant_identifier_names
  static final _MyString_set_str =
    _capi<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, ffi.Size)>>('MyString_set_str')
      .asFunction<void Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, int)>(isLeaf: true);

  String get getStr {
    final writeable = _Writeable();
    _MyString_get_str(_underlying, writeable._underlying);
    return writeable.finalize();
  }

  // ignore: non_constant_identifier_names
  static final _MyString_get_str =
    _capi<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>>('MyString_get_str')
      .asFunction<void Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true);
}
