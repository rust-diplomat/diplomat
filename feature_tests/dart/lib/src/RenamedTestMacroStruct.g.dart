// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

final class _RenamedTestMacroStructFfi extends ffi.Struct {
  @ffi.Size()
  external int a;
}

final class RenamedTestMacroStruct {
  int a;

  // This struct contains borrowed fields, so this takes in a list of
  // "edges" corresponding to where each lifetime's data may have been borrowed from
  // and passes it down to individual fields containing the borrow.
  // This method does not attempt to handle any dependencies between lifetimes, the caller
  // should handle this when constructing edge arrays.
  // ignore: unused_element
  RenamedTestMacroStruct._fromFfi(_RenamedTestMacroStructFfi ffi) :
    a = ffi.a;

  // ignore: unused_element
  _RenamedTestMacroStructFfi _toFfi(ffi.Allocator temp) {
    final struct = ffi.Struct.create<_RenamedTestMacroStructFfi>();
    struct.a = a;
    return struct;
  }

  static int testFunc() {
    final result = _namespace_TestMacroStruct_test_func();
    return result;
  }

  factory RenamedTestMacroStruct({int? a}) {
    final result = _namespace_TestMacroStruct_test_meta();
    final dart = RenamedTestMacroStruct._fromFfi(result);
    if (a != null) {
      dart.a = a;
    }
    return dart;
  }


  @override
  bool operator ==(Object other) =>
      other is RenamedTestMacroStruct &&
      other.a == a;

  @override
  int get hashCode => Object.hashAll([
        a,
      ]);
}

@_DiplomatFfiUse('namespace_TestMacroStruct_test_func')
@ffi.Native<ffi.Size Function()>(isLeaf: true, symbol: 'namespace_TestMacroStruct_test_func')
// ignore: non_constant_identifier_names
external int _namespace_TestMacroStruct_test_func();

@_DiplomatFfiUse('namespace_TestMacroStruct_test_meta')
@ffi.Native<_RenamedTestMacroStructFfi Function()>(isLeaf: true, symbol: 'namespace_TestMacroStruct_test_meta')
// ignore: non_constant_identifier_names
external _RenamedTestMacroStructFfi _namespace_TestMacroStruct_test_meta();

// dart format on
