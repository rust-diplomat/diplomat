// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

final class _RenamedVectorTestFfi extends ffi.Struct {
  @ffi.Double()
  external double test;
}

final class RenamedVectorTest {
  double test;

  RenamedVectorTest({required this.test});

  // This struct contains borrowed fields, so this takes in a list of
  // "edges" corresponding to where each lifetime's data may have been borrowed from
  // and passes it down to individual fields containing the borrow.
  // This method does not attempt to handle any dependencies between lifetimes, the caller
  // should handle this when constructing edge arrays.
  // ignore: unused_element
  RenamedVectorTest._fromFfi(_RenamedVectorTestFfi ffi) :
    test = ffi.test;

  // ignore: unused_element
  _RenamedVectorTestFfi _toFfi(ffi.Allocator temp) {
    final struct = ffi.Struct.create<_RenamedVectorTestFfi>();
    struct.test = test;
    return struct;
  }

  static RenamedVectorTest new_() {
    final result = _namespace_VectorTest_new();
    return RenamedVectorTest._fromFfi(result);
  }


  @override
  bool operator ==(Object other) =>
      other is RenamedVectorTest &&
      other.test == test;

  @override
  int get hashCode => Object.hashAll([
        test,
      ]);
}

@_DiplomatFfiUse('namespace_VectorTest_new')
@ffi.Native<_RenamedVectorTestFfi Function()>(isLeaf: true, symbol: 'namespace_VectorTest_new')
// ignore: non_constant_identifier_names
external _RenamedVectorTestFfi _namespace_VectorTest_new();

// dart format on
