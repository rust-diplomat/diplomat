// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

final class RenamedVectorTest implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  RenamedVectorTest._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  @_DiplomatFfiUse('namespace_VectorTest_destroy')
  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_namespace_VectorTest_destroy));

  factory RenamedVectorTest() {
    final result = _namespace_VectorTest_new();
    return RenamedVectorTest._fromFfi(result, []);
  }

  int get len {
    final result = _namespace_VectorTest_len(_ffi);
    return result;
  }

  double? operator [](int idx) {
    final result = _namespace_VectorTest_get(_ffi, idx);
    if (!result.isOk) {
      return null;
    }
    return result.union.ok;
  }

  void push(double value) {
    _namespace_VectorTest_push(_ffi, value);
  }

}

@_DiplomatFfiUse('namespace_VectorTest_destroy')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'namespace_VectorTest_destroy')
// ignore: non_constant_identifier_names
external void _namespace_VectorTest_destroy(ffi.Pointer<ffi.Void> self);

@_DiplomatFfiUse('namespace_VectorTest_new')
@ffi.Native<ffi.Pointer<ffi.Opaque> Function()>(isLeaf: true, symbol: 'namespace_VectorTest_new')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _namespace_VectorTest_new();

@_DiplomatFfiUse('namespace_VectorTest_len')
@ffi.Native<ffi.Size Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'namespace_VectorTest_len')
// ignore: non_constant_identifier_names
external int _namespace_VectorTest_len(ffi.Pointer<ffi.Opaque> self);

@_DiplomatFfiUse('namespace_VectorTest_get')
@ffi.Native<_ResultDoubleVoid Function(ffi.Pointer<ffi.Opaque>, ffi.Size)>(isLeaf: true, symbol: 'namespace_VectorTest_get')
// ignore: non_constant_identifier_names
external _ResultDoubleVoid _namespace_VectorTest_get(ffi.Pointer<ffi.Opaque> self, int idx);

@_DiplomatFfiUse('namespace_VectorTest_push')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, ffi.Double)>(isLeaf: true, symbol: 'namespace_VectorTest_push')
// ignore: non_constant_identifier_names
external void _namespace_VectorTest_push(ffi.Pointer<ffi.Opaque> self, double value);

// dart format on
