// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

final class _BorrowingOptionStructFfi extends ffi.Struct {
  external _ResultSliceUtf8Void a;
}

final class BorrowingOptionStruct {
  String? a;

  BorrowingOptionStruct({this.a});

  // ignore: unused_element
  BorrowingOptionStruct._fromFfi(_BorrowingOptionStructFfi ffi, core.List<Object> aEdges) :
    a = ffi.a.isOk ? ffi.a.union.ok._toDart(aEdges) : null;

  // If this struct contains any slices, their lifetime-edge-relevant objects (typically _FinalizedArenas) will only
  // be constructed here, and can be appended to any relevant lifetime arrays here. <lifetime>AppendArray accepts a list
  // of arrays for each lifetime to do so. It accepts multiple lists per lifetime in case the caller needs to tie a lifetime to multiple
  // output arrays. Null is equivalent to an empty list: this lifetime is not being borrowed from.
  // ignore: unused_element
  _BorrowingOptionStructFfi _toFfi(ffi.Allocator temp, {core.List<core.List<Object>> aAppendArray = const []}) {
    final struct = ffi.Struct.create<_BorrowingOptionStructFfi>();
    String? a = this.a;
    struct.a = a != null ? _ResultSliceUtf8Void.ok(a._utf8AllocIn(aAppendArray.isNotEmpty ? _FinalizedArena.withLifetime(aAppendArray).arena : temp)) : _ResultSliceUtf8Void.err();
    return struct;
  }


  @override
  bool operator ==(Object other) =>
      other is BorrowingOptionStruct &&
      other.a == a;

  @override
  int get hashCode => Object.hashAll([
        a,
      ]);

  // Return all fields corresponding to lifetime `'a`
  // without handling lifetime dependencies (this is the job of the caller)
  // This is all fields that may be borrowed from if borrowing `'a`,
  // assuming that there are no `'other: a`. bounds. In case of such bounds,
  // the caller should take care to also call _fieldsForLifetimeOther
  // ignore: unused_element
  core.List<Object> get _fieldsForLifetimeA => [a];
}

// dart format on
