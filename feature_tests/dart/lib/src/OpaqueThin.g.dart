// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

final class OpaqueThin implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  OpaqueThin._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_OpaqueThin_destroy));

  int get a {
    final result = _OpaqueThin_a(_ffi);
    return result;
  }

  double get b {
    final result = _OpaqueThin_b(_ffi);
    return result;
  }
}

@_DiplomatFfiUse('OpaqueThin_destroy')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'OpaqueThin_destroy')
// ignore: non_constant_identifier_names
external void _OpaqueThin_destroy(ffi.Pointer<ffi.Void> self);

@_DiplomatFfiUse('OpaqueThin_a')
@ffi.Native<ffi.Int32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'OpaqueThin_a')
// ignore: non_constant_identifier_names
external int _OpaqueThin_a(ffi.Pointer<ffi.Opaque> self);

@_DiplomatFfiUse('OpaqueThin_b')
@ffi.Native<ffi.Float Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'OpaqueThin_b')
// ignore: non_constant_identifier_names
external double _OpaqueThin_b(ffi.Pointer<ffi.Opaque> self);

// dart format on
