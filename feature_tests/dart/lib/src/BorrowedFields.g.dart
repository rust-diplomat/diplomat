// generated by diplomat-tool

part of 'lib.g.dart';

final class _BorrowedFieldsFfi extends ffi.Struct {
  external _SliceUtf16 a;
  external _SliceUtf8 b;
  external _SliceUtf8 c;
}

final class BorrowedFields {
  String a;
  String b;
  String c;

  BorrowedFields({required this.a, required this.b, required this.c});
  // ignore: unused_element
  BorrowedFields._fromFfi(_BorrowedFieldsFfi ffi, core.List<Object> aEdges) :
    a = core.String.fromCharCodes(ffi.a._data.asTypedList(ffi.a._length)),
    b = Utf8Decoder().convert(ffi.b._data.asTypedList(ffi.b._length)),
    c = Utf8Decoder().convert(ffi.c._data.asTypedList(ffi.c._length));
  // If this struct contains any slices, their lifetime-edge-relevant objects (typically _FinalizedArenas) will only
  // be constructed here, and can be appended to any relevant lifetime arrays here. <lifetime>AppendArray accepts a list
  // of arrays for each lifetime to do so. It accepts multiple lists per lifetime in case the caller needs to tie a lifetime to multiple
  // output arrays. Null is equivalent to an empty list: this lifetime is not being borrowed from.
  // ignore: unused_element
  _BorrowedFieldsFfi _toFfi(ffi.Allocator temp, {core.List<core.List<Object>>? aAppendArray}) {
    final pointer = temp<_BorrowedFieldsFfi>();
    final aView = a.utf16View;
    pointer.ref.a._length = aView.length;
    final aArena = (aAppendArray != null && !aAppendArray.isEmpty) ? _FinalizedArena.withLifetime(aAppendArray).arena : temp;
    pointer.ref.a._data = aView.allocIn(aArena);
    final bView = b.utf8View;
    pointer.ref.b._length = bView.length;
    final bArena = (aAppendArray != null && !aAppendArray.isEmpty) ? _FinalizedArena.withLifetime(aAppendArray).arena : temp;
    pointer.ref.b._data = bView.allocIn(bArena);
    final cView = c.utf8View;
    pointer.ref.c._length = cView.length;
    final cArena = (aAppendArray != null && !aAppendArray.isEmpty) ? _FinalizedArena.withLifetime(aAppendArray).arena : temp;
    pointer.ref.c._data = cView.allocIn(cArena);
    return pointer.ref;
  }

  @override
  bool operator ==(Object other) =>
      other is BorrowedFields &&
      other.a == this.a &&
      other.b == this.b &&
      other.c == this.c;

  @override
  int get hashCode => Object.hashAll([
        this.a,
        this.b,
        this.c,
      ]);

  // Append all fields corresponding to lifetime `'a` 
  // without handling lifetime dependencies (this is the job of the caller)
  // This is all fields that may be borrowed from if borrowing `'a`,
  // assuming that there are no `'other: a`. bounds. In case of such bounds,
  // the caller should take care to also call _fields_for_lifetime_other()
  // ignore: unused_element
  core.List<Object> _fields_for_lifetime_a() {
    return [a, b, c];
  }
}
