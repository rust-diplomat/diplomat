// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

final class _BorrowedFieldsFfi extends ffi.Struct {
  external _SliceFfiUtf16 a;
  external _SliceFfi2Utf8 b;
}

final class BorrowedFields {
  final _BorrowedFieldsFfi _underlying;

  // ignore: unused_element
  BorrowedFields._(this._underlying);

  factory BorrowedFields() {
    final pointer = ffi2.calloc<_BorrowedFieldsFfi>();
    final result = BorrowedFields._(pointer.ref);
    _callocFree.attach(result, pointer.cast());
    return result;
  }

  String get a => _underlying.a._asDart;
  set a(String a) {
    final alloc = ffi2.calloc;
    alloc.free(_underlying.a._bytes);
    final aSlice = _SliceFfiUtf16._fromDart(a, alloc);
    _underlying.a = aSlice;
  }

  String get b => _underlying.b._asDart;
  set b(String b) {
    final alloc = ffi2.calloc;
    alloc.free(_underlying.b._bytes);
    final bSlice = _SliceFfi2Utf8._fromDart(b, alloc);
    _underlying.b = bSlice;
  }

  @override
  bool operator ==(Object other) =>
      other is BorrowedFields &&
      other._underlying.a == _underlying.a &&
      other._underlying.b == _underlying.b;

  @override
  int get hashCode => Object.hashAll([
        _underlying.a,
        _underlying.b,
      ]);
}
