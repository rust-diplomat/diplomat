// generated by diplomat-tool
import { OptionStruct } from "./OptionStruct.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const OptionOpaque_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.OptionOpaque_destroy(ptr);
});

export class OptionOpaque {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    constructor(ptr, selfEdge) {
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        OptionOpaque_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }

    static new_(i) {
        const result = wasm.OptionOpaque_new(i);
    
        try {
            return result === 0 ? null : new OptionOpaque(result, []);
        }
        
        finally {}
    }

    static newNone() {
        const result = wasm.OptionOpaque_new_none();
    
        try {
            return result === 0 ? null : new OptionOpaque(result, []);
        }
        
        finally {}
    }

    static returns() {
        
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 17, 4, true);
        const result = wasm.OptionOpaque_returns(diplomatReceive.buffer);
    
        try {
            if (!diplomatReceive.resultFlag) {
                return null;
            }
            return new OptionStruct(diplomatReceive.buffer);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    optionIsize() {
        
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        const result = wasm.OptionOpaque_option_isize(diplomatReceive.buffer, this.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                return null;
            }
            return (new Int32Array(wasm.memory.buffer, diplomatReceive.buffer, 1))[0];
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    optionUsize() {
        
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        const result = wasm.OptionOpaque_option_usize(diplomatReceive.buffer, this.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                return null;
            }
            return (new Uint32Array(wasm.memory.buffer, diplomatReceive.buffer, 1))[0];
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    optionI32() {
        
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        const result = wasm.OptionOpaque_option_i32(diplomatReceive.buffer, this.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                return null;
            }
            return (new Int32Array(wasm.memory.buffer, diplomatReceive.buffer, 1))[0];
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    optionU32() {
        
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        const result = wasm.OptionOpaque_option_u32(diplomatReceive.buffer, this.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                return null;
            }
            return (new Uint32Array(wasm.memory.buffer, diplomatReceive.buffer, 1))[0];
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static newStruct() {
        
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 16, 4, false);
        const result = wasm.OptionOpaque_new_struct(diplomatReceive.buffer);
    
        try {
            return new OptionStruct(diplomatReceive.buffer);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static newStructNones() {
        
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 16, 4, false);
        const result = wasm.OptionOpaque_new_struct_nones(diplomatReceive.buffer);
    
        try {
            return new OptionStruct(diplomatReceive.buffer);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    assertInteger(i) {
        wasm.OptionOpaque_assert_integer(this.ffiValue, i);
    
        try {}
        
        finally {}
    }

    static optionOpaqueArgument(arg) {
        const result = wasm.OptionOpaque_option_opaque_argument(arg.ffiValue ?? 0);
    
        try {
            return result;
        }
        
        finally {}
    }
}