// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";



export class RenamedVectorTest {
    #test;
    get test() {
        return this.#test;
    }
    set test(value){
        this.#test = value;
    }
    /** @internal */
    static fromFields(structObj) {
        return new RenamedVectorTest(structObj);
    }

    #internalConstructor(structObj) {
        if (typeof structObj !== "object") {
            throw new Error("RenamedVectorTest's constructor takes an object of RenamedVectorTest's fields.");
        }

        if ("test" in structObj) {
            this.#test = structObj.test;
        } else {
            throw new Error("Missing required field test.");
        }

        return this;
    }

    // Return this struct in FFI function friendly format.
    // Returns an array that can be expanded with spread syntax (...)
    _intoFFI(
        functionCleanupArena,
        appendArrayMap
    ) {
        return this.#test;
    }

    static _fromSuppliedValue(internalConstructor, obj) {
        if (internalConstructor !== diplomatRuntime.internalConstructor) {
            throw new Error("_fromSuppliedValue cannot be called externally.");
        }

        if (obj instanceof RenamedVectorTest) {
            return obj;
        }

        return RenamedVectorTest.fromFields(obj);
    }

    _writeToArrayBuffer(
        arrayBuffer,
        offset,
        functionCleanupArena,
        appendArrayMap
    ) {
        diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, this.#test, Float64Array);
    }

    // This struct contains borrowed fields, so this takes in a list of
    // "edges" corresponding to where each lifetime's data may have been borrowed from
    // and passes it down to individual fields containing the borrow.
    // This method does not attempt to handle any dependencies between lifetimes, the caller
    // should handle this when constructing edge arrays.
    static _fromFFI(internalConstructor, primitiveValue) {
        if (internalConstructor !== diplomatRuntime.internalConstructor) {
            throw new Error("RenamedVectorTest._fromFFI is not meant to be called externally. Please use the default constructor.");
        }
        let structObj = {};
        structObj.test = primitiveValue;

        return new RenamedVectorTest(structObj);
    }


    static new_() {

        const result = wasm.namespace_VectorTest_new();

        try {
            return RenamedVectorTest._fromFFI(diplomatRuntime.internalConstructor, result);
        }

        finally {
        }
    }

    constructor(structObj) {
        return this.#internalConstructor(...arguments)
    }
}