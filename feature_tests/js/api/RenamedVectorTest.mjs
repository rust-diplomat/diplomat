// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const RenamedVectorTest_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.namespace_VectorTest_destroy(ptr);
});

export class RenamedVectorTest {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];

    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("RenamedVectorTest is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            RenamedVectorTest_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    /** @internal */
    get ffiValue() {
        return this.#ptr;
    }


    #defaultConstructor() {

        const result = wasm.namespace_VectorTest_new();

        try {
            return new RenamedVectorTest(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    get len() {

        const result = wasm.namespace_VectorTest_len(this.ffiValue);

        try {
            return result;
        }

        finally {
        }
    }

    get(idx) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 9, 8, true);


        const result = wasm.namespace_VectorTest_get(diplomatReceive.buffer, this.ffiValue, idx);

        try {
            if (!diplomatReceive.resultFlag) {
                return null;
            }
            return (new Float64Array(wasm.memory.buffer, diplomatReceive.buffer, 1))[0];
        }

        finally {
            diplomatReceive.free();
        }
    }

    push(value) {
    wasm.namespace_VectorTest_push(this.ffiValue, value);

        try {}

        finally {
        }
    }

    constructor() {
        if (arguments[0] === diplomatRuntime.exposeConstructor) {
            return this.#internalConstructor(...Array.prototype.slice.call(arguments, 1));
        } else if (arguments[0] === diplomatRuntime.internalConstructor) {
            return this.#internalConstructor(...arguments);
        } else {
            return this.#defaultConstructor(...arguments);
        }
    }
}