// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";



export class PrimitiveStruct {
    #x;
    get x() {
        return this.#x;
    }
    set x(value){
        this.#x = value;
    }
    #a;
    get a() {
        return this.#a;
    }
    set a(value){
        this.#a = value;
    }
    #b;
    get b() {
        return this.#b;
    }
    set b(value){
        this.#b = value;
    }
    #c;
    get c() {
        return this.#c;
    }
    set c(value){
        this.#c = value;
    }
    #d;
    get d() {
        return this.#d;
    }
    set d(value){
        this.#d = value;
    }
    #e;
    get e() {
        return this.#e;
    }
    set e(value){
        this.#e = value;
    }
    /** @internal */
    static fromFields(structObj) {
        return new PrimitiveStruct(structObj);
    }

    #internalConstructor(structObj) {
        if (typeof structObj !== "object") {
            throw new Error("PrimitiveStruct's constructor takes an object of PrimitiveStruct's fields.");
        }

        if ("x" in structObj) {
            this.#x = structObj.x;
        } else {
            throw new Error("Missing required field x.");
        }

        if ("a" in structObj) {
            this.#a = structObj.a;
        } else {
            throw new Error("Missing required field a.");
        }

        if ("b" in structObj) {
            this.#b = structObj.b;
        } else {
            throw new Error("Missing required field b.");
        }

        if ("c" in structObj) {
            this.#c = structObj.c;
        } else {
            throw new Error("Missing required field c.");
        }

        if ("d" in structObj) {
            this.#d = structObj.d;
        } else {
            throw new Error("Missing required field d.");
        }

        if ("e" in structObj) {
            this.#e = structObj.e;
        } else {
            throw new Error("Missing required field e.");
        }

        return this;
    }

    // Return this struct in FFI function friendly format.
    // Returns an array that can be expanded with spread syntax (...)
    _intoFFI(
        functionCleanupArena,
        appendArrayMap
    ) {
        let buffer = diplomatRuntime.DiplomatBuf.struct(wasm, 32, 8);

        this._writeToArrayBuffer(wasm.memory.buffer, buffer.ptr, functionCleanupArena, appendArrayMap);

        functionCleanupArena.alloc(buffer);

        return buffer.ptr;
    }

    static _fromSuppliedValue(internalConstructor, obj) {
        if (internalConstructor !== diplomatRuntime.internalConstructor) {
            throw new Error("_fromSuppliedValue cannot be called externally.");
        }

        if (obj instanceof PrimitiveStruct) {
            return obj;
        }

        return PrimitiveStruct.fromFields(obj);
    }

    _writeToArrayBuffer(
        arrayBuffer,
        offset,
        functionCleanupArena,
        appendArrayMap
    ) {
        diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, this.#x, Float32Array);
        diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 4, this.#a, Uint8Array);
        diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 8, this.#b, Uint32Array);
        diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 16, this.#c, BigInt64Array);
        diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 24, this.#d, Int32Array);
        diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 28, this.#e, Uint8Array);
    }

    // This struct contains borrowed fields, so this takes in a list of
    // "edges" corresponding to where each lifetime's data may have been borrowed from
    // and passes it down to individual fields containing the borrow.
    // This method does not attempt to handle any dependencies between lifetimes, the caller
    // should handle this when constructing edge arrays.
    static _fromFFI(internalConstructor, ptr) {
        if (internalConstructor !== diplomatRuntime.internalConstructor) {
            throw new Error("PrimitiveStruct._fromFFI is not meant to be called externally. Please use the default constructor.");
        }
        let structObj = {};
        const xDeref = (new Float32Array(wasm.memory.buffer, ptr, 1))[0];
        structObj.x = xDeref;
        const aDeref = (new Uint8Array(wasm.memory.buffer, ptr + 4, 1))[0] === 1;
        structObj.a = aDeref;
        const bDeref = (new Uint32Array(wasm.memory.buffer, ptr + 8, 1))[0];
        structObj.b = bDeref;
        const cDeref = (new BigInt64Array(wasm.memory.buffer, ptr + 16, 1))[0];
        structObj.c = cDeref;
        const dDeref = (new Int32Array(wasm.memory.buffer, ptr + 24, 1))[0];
        structObj.d = dDeref;
        const eDeref = (new Uint8Array(wasm.memory.buffer, ptr + 28, 1))[0];
        structObj.e = eDeref;

        return new PrimitiveStruct(structObj);
    }


    constructor(structObj) {
        return this.#internalConstructor(...arguments)
    }
}